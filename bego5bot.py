<div># -*- coding: utf-8 -*-<div></div>from linepy import *<br/>from datetime import datetime<br/>from time import sleep<br/>from bs4 import BeautifulSoup<br/>from humanfriendly import format_timespan, format_size, format_number, format_length<br/>import time, random, sys, json, codecs, threading, glob, re, string, os, requests, subprocess, six, ast, pytz, urllib, urllib.parse<br/>from gtts import gTTS<br/>from googletrans import Translator<br/>#==============================================================================#<br/>botStart = time.time()<div></div>chivas = LINE()<br/>#chivas = LINE("TOKEN KAMU")<br/>#chivas = LINE("Email","Password")<br/>chivas.log("Auth Token : " + str(chivas.authToken))<br/>channelToken = chivas.getChannelResult()<br/>chivas.log("Channel Token : " + str(channelToken))<div></div>ki = LINE()<br/>#ki = LINE("TOKEN KAMU")<br/>#ki = LINE("Email","Password")<br/>ki.log("Auth Token : " + str(ki.authToken))<br/>channelToken = ki.getChannelResult()<br/>ki.log("Channel Token : " + str(channelToken))<div></div>ki2 = LINE()<br/>#ki2 = LINE("TOKEN KAMU")<br/>#ki2 = LINE("Email","Password")<br/>ki2.log("Auth Token : " + str(ki2.authToken))<br/>channelToken = ki2.getChannelResult()<br/>ki2.log("Channel Token : " + str(channelToken))<div></div>ki3 = LINE()<br/>#ki3 = LINE("TOKEN KAMU")<br/>#ki3 = LINE("Email","Password")<br/>ki3.log("Auth Token : " + str(ki3.authToken))<br/>channelToken = ki3.getChannelResult()<br/>ki3.log("Channel Token : " + str(channelToken))<div></div>ki4 = LINE()<br/>#ki4 = LINE("TOKEN KAMU")<br/>#ki4 = LINE("Email","Password")<br/>ki4.log("Auth Token : " + str(ki4.authToken))<br/>channelToken = ki4.getChannelResult()<br/>ki4.log("Channel Token : " + str(channelToken))<div></div><br/>KAC = [chivas,ki,ki2,ki3,ki4]<div></div>chivasMID = chivas.profile.mid<br/>kiMID = ki.profile.mid<br/>ki2MID = ki2.profile.mid<br/>ki3MID = ki3.profile.mid<br/>ki4MID = ki4.profile.mid<div></div>Bots = [chivasMID,kiMID,ki2MID,ki3MID,ki4MID]<br/>creator = ["u14f64e139a3817afaabe27d237afb36b","u92e4326146a0bf296ca15846aa2a25f6"]<br/>Owner = ["u14f64e139a3817afaabe27d237afb36b"]<br/>admin = ["u14f64e139a3817afaabe27d237afb36b"]<div></div>chivasProfile = chivas.getProfile()<br/>kiProfile = ki.getProfile()<br/>ki2Profile = ki2.getProfile()<br/>ki3Profile = ki3.getProfile()<br/>ki4Profile = ki4.getProfile()<div></div>lineSettings = chivas.getSettings()<br/>kiSettings = ki.getSettings()<br/>ki2Settings = ki2.getSettings()<br/>ki3Settings = ki3.getSettings()<br/>ki4Settings = ki4.getSettings()<div></div>oepoll = OEPoll(chivas)<br/>oepoll1 = OEPoll(ki)<br/>oepoll2 = OEPoll(ki2)<br/>oepoll3 = OEPoll(ki3)<br/>oepoll4 = OEPoll(ki4)<div></div>responsename = chivas.getProfile().displayName<br/>responsename2 = ki.getProfile().displayName<br/>responsename3 = ki2.getProfile().displayName<br/>responsename4 = ki3.getProfile().displayName<br/>responsename5 = ki4.getProfile().displayName<br/>#==============================================================================#<div></div><div></div><br/>with open('Owner.json', 'r') as fp:<br/>    Owner = json.load(fp)<br/>    <br/>with open('admin.json', 'r') as fp:<br/>    admin = json.load(fp)<br/>    <br/>myProfile = {<br/>	"displayName": "",<br/>	"statusMessage": "",<br/>	"pictureStatus": ""<br/>}<div></div>myProfile["displayName"] = chivasProfile.displayName<br/>myProfile["statusMessage"] = chivasProfile.statusMessage<br/>myProfile["pictureStatus"] = chivasProfile.pictureStatus<div></div>readOpen = codecs.open("read.json","r","utf-8")<br/>settingsOpen = codecs.open("temp.json","r","utf-8")<div></div>#==============================================================================#<div></div>read = json.load(readOpen)<br/>settings = json.load(settingsOpen)<div></div>#if settings["restartPoint"] != None:<br/>#    chivas.sendMessage(settings["restartPoint"], "Bot kembali aktif")<br/>#    settings["restartBot"] = None<div></div>def restartBot():<br/>    print ("[ INFO ] BOT RESETTED")<br/>    backupData()<br/>#    time.sleep(10)<br/>    python = sys.executable<br/>    os.execl(python, python, *sys.argv)<br/>    <br/>def logError(text):<br/>    chivas.log("[ ERROR ] " + str(text))<br/>    time_ = datetime.now()<br/>    with open("errorLog.txt","a") as error:<br/>        error.write("\n[%s] %s" % (str(time), text))<br/>        <br/>def sendMessageWithMention(to, mid):<br/>    try:<br/>        aa = '{"S":"0","E":"3","M":'+json.dumps(mid)+'}'<br/>        text_ = '@x '<br/>        chivas.sendMessage(to, text_, contentMetadata={'MENTION':'{"MENTIONEES":['+aa+']}'}, contentType=0)<br/>    except Exception as error:<br/>        logError(error)<br/>        <br/>def helpmessage():<br/>    helpMessage = "╔═══════════════" + "\n" + \<br/>                  "╠"▁ ▂ ▄ ▅ ▆ ▇ █ [  Chivas ] █ ▇ ▆ ▅ ▄ ▂ ▁+ "\n" + \<br/>                  "║" + "\n" + \<br/>                  "╠══✪〘 Help Message 〙✪══" + "\n" + \<br/>                  "║" + "\n" + \<br/>                  "╠✪〘 Help 〙✪════════" + "\n" + \<br/>                  "╠➥ Help" + "\n" + \<br/>                  "╠➥ Translate" + "\n" + \<br/>                  "╠➥ Texttospeech" + "\n" + \<br/>                  "║" + "\n" + \<br/>                  "╠✪〘 Protect 〙✪═══════" + "\n" + \<br/>                  "╠➥ Protect 「On/Off」" + "\n" + \<br/>                  "╠➥ QrProtect 「On/Off」" + "\n" + \<br/>                  "╠➥ InviteProtect 「On/Off」" + "\n" + \<br/>                  "╠➥ CancelProtect 「On/Off」" + "\n" + \<br/>                  "╠➥ SetPro 「On/Off」" + "\n" + \<br/>                  "║" + "\n" + \<br/>                  "╠✪〘 Status 〙✪════════" + "\n" + \<br/>                  "╠➥ Restart" + "\n" + \<br/>                  "╠➥ Runtime" + "\n" + \<br/>                  "╠➥ Speed" + "\n" + \<br/>                  "╠➥ Status" + "\n" + \<br/>                  "╠➥ About" + "\n" + \<br/>                  "║" + "\n" + \<br/>                  "╠✪〘 Settings 〙✪═══════" + "\n" + \<br/>                  "╠➥ AutoAdd「On/Off」" + "\n" + \<br/>                  "╠➥ AutoJoin「On/Off」" + "\n" + \<br/>                  "╠➥ AutoLeave「On/Off」" + "\n" + \<br/>                  "╠➥ AutoRead「On/Off」" + "\n" + \<br/>                  "╠➥ CheckSticker「On/Off」" + "\n" + \<br/>                  "╠➥ DetectMention「On/Off」" + "\n" + \<br/>                  "║" + "\n" + \<br/>                  "╠✪〘 Self 〙✪═════════" + "\n" + \<br/>                  "╠➥ Me" + "\n" + \<br/>                  "╠➥ MyMid" + "\n" + \<br/>                  "╠➥ MyName" + "\n" + \<br/>                  "╠➥ MyBio" + "\n" + \<br/>                  "╠➥ MyPicture" + "\n" + \<br/>                  "╠➥ MyVideoProfile" + "\n" + \<br/>                  "╠➥ MyCover" + "\n" + \<br/>                  "╠➥ StealContact「Mention」" + "\n" + \<br/>                  "╠➥ StealMid「Mention」" + "\n" + \<br/>                  "╠➥ StealName「Mention」" + "\n" + \<br/>                  "╠➥ StealBio「Mention」" + "\n" + \<br/>                  "╠➥ StealPicture「Mention」" + "\n" + \<br/>                  "╠➥ StealVideoProfile「Mention」" + "\n" + \<br/>                  "╠➥ StealCover「Mention」" + "\n" + \<br/>                  "╠➥ CloneProfile「Mention」" + "\n" + \<br/>                  "╠➥ RestoreProfile" + "\n" + \<br/>                  "║" + "\n" + \<br/>                  "╠✪〘 Group 〙✪════════" + "\n" + \<br/>                  "╠➥ GroupCreator" + "\n" + \<br/>                  "╠➥ GroupId" + "\n" + \<br/>                  "╠➥ GroupName" + "\n" + \<br/>                  "╠➥ GroupPicture" + "\n" + \<br/>                  "╠➥ GroupTicket" + "\n" + \<br/>                  "╠➥ GroupTicket「On/Off」" + "\n" + \<br/>                  "╠➥ GroupList" + "\n" + \<br/>                  "╠➥ GroupMemberList" + "\n" + \<br/>                  "╠➥ GroupInfo" + "\n" + \<br/>                  "╠➥ Kill「Mention」" + "\n" + \<br/>                  "╠➥ KickAllMember"+ "\n" + \<br/>                  "║" + "\n" + \<br/>                  "╠✪〘 Special 〙✪═══════" + "\n" + \<br/>                  "╠➥ Mimic「On/Off」" + "\n" + \<br/>                  "╠➥ MimicList" + "\n" + \<br/>                  "╠➥ MimicAdd「Mention」" + "\n" + \<br/>                  "╠➥ MimicDel「Mention」" + "\n" + \<br/>                  "╠➥ Mention" + "\n" + \<br/>                  "╠➥ Lurking「Oɴ/Off/Reset」" + "\n" + \<br/>                  "╠➥ Lurking" + "\n" + \<br/>                  "║" + "\n" + \<br/>                  "╠✪〘 Media 〙✪════════" + "\n" + \<br/>                  "╠➥ Kalender" + "\n" + \<br/>                  "╠➥ CheckDate「Date」" + "\n" + \<br/>                  "╠➥ InstagramInfo「UserName」" + "\n" + \<br/>                  "╠➥ InstagramPost「UserName」" + "\n" + \<br/>                  "╠➥ SearchYoutube「Search」" + "\n" + \<br/>                  "╠➥ SearchMusic「Search」" + "\n" + \<br/>                  "╠➥ SearchLyric「Search」" + "\n" + \<br/>                  "╠➥ SearchImage「Search」" + "\n" + \<br/>                  "╠➥ ScreenshootWebsite「LinkUrl」" + "\n" + \<br/>                  "║" + "\n" + \<br/>                  "╠✪〘 Bot 〙✪═════════" + "\n" + \<br/>                  "╠➥ AdminAdd" + "\n" + \<br/>                  "╠➥ AdminDel" + "\n" + \<br/>                  "╠➥ AdminList" + "\n" + \<br/>                  "╠➥ OwnerAdd" + "\n" + \<br/>                  "╠➥ OwnerDel" + "\n" + \<br/>                  "╠➥ OwnerList" + "\n" + \<br/>                  "╠➥ BanContact" + "\n" + \<br/>                  "╠➥ UnbanContact" + "\n" + \<br/>                  "╠➥ BanList" + "\n" + \<br/>                  "╠➥ ClearBan" + "\n" + \<br/>                  "╠➥ Respon" + "\n" + \<br/>                  "╠➥ Absen" + "\n" + \<br/>                  "╠➥ JoinAll" + "\n" + \<br/>                  "╠➥ ByeAll" + "\n" + \<br/>                  "║" + "\n" + \<br/>                  "╚═〘 Credits By: ▁ ▂ ▄ ▅ ▆ ▇ █ [  Chivas ] █ ▇ ▆ ▅ ▄ ▂ ▁  〙"<br/>    return helpMessage<br/>    <br/>def helptexttospeech():<br/>    helpTextToSpeech =   "╔══〘 T E X T   T O   S P E E C H 〙" + "\n" + \<br/>                         "╠ af : Afrikaans" + "\n" + \<br/>                         "╠ sq : Albanian" + "\n" + \<br/>                         "╠ ar : Arabic" + "\n" + \<br/>                         "╠ hy : Armenian" + "\n" + \<br/>                         "╠ bn : Bengali" + "\n" + \<br/>                         "╠ ca : Catalan" + "\n" + \<br/>                         "╠ zh : Chinese" + "\n" + \<br/>                         "╠ zh-cn : Chinese (Mandarin/China)" + "\n" + \<br/>                         "╠ zh-tw : Chinese (Mandarin/Taiwan)" + "\n" + \<br/>                         "╠ zh-yue : Chinese (Cantonese)" + "\n" + \<br/>                         "╠ hr : Croatian" + "\n" + \<br/>                         "╠ cs : Czech" + "\n" + \<br/>                         "╠ da : Danish" + "\n" + \<br/>                         "╠ nl : Dutch" + "\n" + \<br/>                         "╠ en : English" + "\n" + \<br/>                         "╠ en-au : English (Australia)" + "\n" + \<br/>                         "╠ en-uk : English (United Kingdom)" + "\n" + \<br/>                         "╠ en-us : English (United States)" + "\n" + \<br/>                         "╠ eo : Esperanto" + "\n" + \<br/>                         "╠ fi : Finnish" + "\n" + \<br/>                         "╠ fr : French" + "\n" + \<br/>                         "╠ de : German" + "\n" + \<br/>                         "╠ el : Greek" + "\n" + \<br/>                         "╠ hi : Hindi" + "\n" + \<br/>                         "╠ hu : Hungarian" + "\n" + \<br/>                         "╠ is : Icelandic" + "\n" + \<br/>                         "╠ id : Indonesian" + "\n" + \<br/>                         "╠ it : Italian" + "\n" + \<br/>                         "╠ ja : Japanese" + "\n" + \<br/>                         "╠ km : Khmer (Cambodian)" + "\n" + \<br/>                         "╠ ko : Korean" + "\n" + \<br/>                         "╠ la : Latin" + "\n" + \<br/>                         "╠ lv : Latvian" + "\n" + \<br/>                         "╠ mk : Macedonian" + "\n" + \<br/>                         "╠ no : Norwegian" + "\n" + \<br/>                         "╠ pl : Polish" + "\n" + \<br/>                         "╠ pt : Portuguese" + "\n" + \<br/>                         "╠ ro : Romanian" + "\n" + \<br/>                         "╠ ru : Russian" + "\n" + \<br/>                         "╠ sr : Serbian" + "\n" + \<br/>                         "╠ si : Sinhala" + "\n" + \<br/>                         "╠ sk : Slovak" + "\n" + \<br/>                         "╠ es : Spanish" + "\n" + \<br/>                         "╠ es-es : Spanish (Spain)" + "\n" + \<br/>                         "╠ es-us : Spanish (United States)" + "\n" + \<br/>                         "╠ sw : Swahili" + "\n" + \<br/>                         "╠ sv : Swedish" + "\n" + \<br/>                         "╠ ta : Tamil" + "\n" + \<br/>                         "╠ th : Thai" + "\n" + \<br/>                         "╠ tr : Turkish" + "\n" + \<br/>                         "╠ uk : Ukrainian" + "\n" + \<br/>                         "╠ vi : Vietnamese" + "\n" + \<br/>                         "╠ cy : Welsh" + "\n" + \<br/>                         "╚══〘 Jangan Typo 〙" + "\n" + "\n\n" + \<br/>                          "Contoh : say-en chivas Cantik"<br/>    return helpTextToSpeech<br/>    <br/>def helptranslate():<br/>    helpTranslate =    "╔══〘 T R A N S L A T E 〙" + "\n" + \<br/>                       "╠ af : afrikaans" + "\n" + \<br/>                       "╠ sq : albanian" + "\n" + \<br/>                       "╠ am : amharic" + "\n" + \<br/>                       "╠ ar : arabic" + "\n" + \<br/>                       "╠ hy : armenian" + "\n" + \<br/>                       "╠ az : azerbaijani" + "\n" + \<br/>                       "╠ eu : basque" + "\n" + \<br/>                       "╠ be : belarusian" + "\n" + \<br/>                       "╠ bn : bengali" + "\n" + \<br/>                       "╠ bs : bosnian" + "\n" + \<br/>                       "╠ bg : bulgarian" + "\n" + \<br/>                       "╠ ca : catalan" + "\n" + \<br/>                       "╠ ceb : cebuano" + "\n" + \<br/>                       "╠ ny : chichewa" + "\n" + \<br/>                       "╠ zh-cn : chinese (simplified)" + "\n" + \<br/>                       "╠ zh-tw : chinese (traditional)" + "\n" + \<br/>                       "╠ co : corsican" + "\n" + \<br/>                       "╠ hr : croatian" + "\n" + \<br/>                       "╠ cs : czech" + "\n" + \<br/>                       "╠ da : danish" + "\n" + \<br/>                       "╠ nl : dutch" + "\n" + \<br/>                       "╠ en : english" + "\n" + \<br/>                       "╠ eo : esperanto" + "\n" + \<br/>                       "╠ et : estonian" + "\n" + \<br/>                       "╠ tl : filipino" + "\n" + \<br/>                       "╠ fi : finnish" + "\n" + \<br/>                       "╠ fr : french" + "\n" + \<br/>                       "╠ fy : frisian" + "\n" + \<br/>                       "╠ gl : galician" + "\n" + \<br/>                       "╠ ka : georgian" + "\n" + \<br/>                       "╠ de : german" + "\n" + \<br/>                       "╠ el : greek" + "\n" + \<br/>                       "╠ gu : gujarati" + "\n" + \<br/>                       "╠ ht : haitian creole" + "\n" + \<br/>                       "╠ ha : hausa" + "\n" + \<br/>                       "╠ haw : hawaiian" + "\n" + \<br/>                       "╠ iw : hebrew" + "\n" + \<br/>                       "╠ hi : hindi" + "\n" + \<br/>                       "╠ hmn : hmong" + "\n" + \<br/>                       "╠ hu : hungarian" + "\n" + \<br/>                       "╠ is : icelandic" + "\n" + \<br/>                       "╠ ig : igbo" + "\n" + \<br/>                       "╠ id : indonesian" + "\n" + \<br/>                       "╠ ga : irish" + "\n" + \<br/>                       "╠ it : italian" + "\n" + \<br/>                       "╠ ja : japanese" + "\n" + \<br/>                       "╠ jw : javanese" + "\n" + \<br/>                       "╠ kn : kannada" + "\n" + \<br/>                       "╠ kk : kazakh" + "\n" + \<br/>                       "╠ km : khmer" + "\n" + \<br/>                       "╠ ko : korean" + "\n" + \<br/>                       "╠ ku : kurdish (kurmanji)" + "\n" + \<br/>                       "╠ ky : kyrgyz" + "\n" + \<br/>                       "╠ lo : lao" + "\n" + \<br/>                       "╠ la : latin" + "\n" + \<br/>                       "╠ lv : latvian" + "\n" + \<br/>                       "╠ lt : lithuanian" + "\n" + \<br/>                       "╠ lb : luxembourgish" + "\n" + \<br/>                       "╠ mk : macedonian" + "\n" + \<br/>                       "╠ mg : malagasy" + "\n" + \<br/>                       "╠ ms : malay" + "\n" + \<br/>                       "╠ ml : malayalam" + "\n" + \<br/>                       "╠ mt : maltese" + "\n" + \<br/>                       "╠ mi : maori" + "\n" + \<br/>                       "╠ mr : marathi" + "\n" + \<br/>                       "╠ mn : mongolian" + "\n" + \<br/>                       "╠ my : myanmar (burmese)" + "\n" + \<br/>                       "╠ ne : nepali" + "\n" + \<br/>                       "╠ no : norwegian" + "\n" + \<br/>                       "╠ ps : pashto" + "\n" + \<br/>                       "╠ fa : persian" + "\n" + \<br/>                       "╠ pl : polish" + "\n" + \<br/>                       "╠ pt : portuguese" + "\n" + \<br/>                       "╠ pa : punjabi" + "\n" + \<br/>                       "╠ ro : romanian" + "\n" + \<br/>                       "╠ ru : russian" + "\n" + \<br/>                       "╠ sm : samoan" + "\n" + \<br/>                       "╠ gd : scots gaelic" + "\n" + \<br/>                       "╠ sr : serbian" + "\n" + \<br/>                       "╠ st : sesotho" + "\n" + \<br/>                       "╠ sn : shona" + "\n" + \<br/>                       "╠ sd : sindhi" + "\n" + \<br/>                       "╠ si : sinhala" + "\n" + \<br/>                       "╠ sk : slovak" + "\n" + \<br/>                       "╠ sl : slovenian" + "\n" + \<br/>                       "╠ so : somali" + "\n" + \<br/>                       "╠ es : spanish" + "\n" + \<br/>                       "╠ su : sundanese" + "\n" + \<br/>                       "╠ sw : swahili" + "\n" + \<br/>                       "╠ sv : swedish" + "\n" + \<br/>                       "╠ tg : tajik" + "\n" + \<br/>                       "╠ ta : tamil" + "\n" + \<br/>                       "╠ te : telugu" + "\n" + \<br/>                       "╠ th : thai" + "\n" + \<br/>                       "╠ tr : turkish" + "\n" + \<br/>                       "╠ uk : ukrainian" + "\n" + \<br/>                       "╠ ur : urdu" + "\n" + \<br/>                       "╠ uz : uzbek" + "\n" + \<br/>                       "╠ vi : vietnamese" + "\n" + \<br/>                       "╠ cy : welsh" + "\n" + \<br/>                       "╠ xh : xhosa" + "\n" + \<br/>                       "╠ yi : yiddish" + "\n" + \<br/>                       "╠ yo : yoruba" + "\n" + \<br/>                       "╠ zu : zulu" + "\n" + \<br/>                       "╠ fil : Filipino" + "\n" + \<br/>                       "╠ he : Hebrew" + "\n" + \<br/>                       "╚══〘 Jangan Typo 〙" + "\n" + "\n\n" + \<br/>                         "Contoh : tr-en chivas Cantik"<br/>    return helpTranslate<br/>#==============================================================================#<br/>def backupData():<br/>    try:<br/>        backup = settings<br/>        f = codecs.open('temp.json','w','utf-8')<br/>        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)<br/>        backup = read<br/>        f = codecs.open('read.json','w','utf-8')<br/>        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)<br/>        return True<br/>    except Exception as error:<br/>        logError(error)<br/>        return False<br/>        <br/>def command(text):<br/>    pesan = text.lower()<br/>    if pesan.startswith(settings["keyCommand"]):<br/>        cmd = pesan.replace(settings["keyCommand"],"")<br/>    else:<br/>        cmd = "Undefined command"<br/>    return cmd        <div></div><br/>def lineBot(op):<br/>    try:<br/>        if op.type == 0:<br/>            print ("[ 0 ] END OF OPERATION")<br/>            return<br/>        if op.type == 5:<br/>            print ("[ 5 ] NOTIFIED ADD CONTACT")<br/>            if settings["autoAdd"] == True:<br/>                chivas.sendMessage(op.param1, "Halo {} terimakasih telah menambahkan saya sebagai teman :D".format(str(chivas.getContact(op.param1).displayName)))<br/>        if op.type == 13:<br/>            print ("[ 13 ] NOTIFIED INVITE INTO GROUP")<br/>            group = chivas.getGroup(op.param1)<br/>            contact = chivas.getContact(op.param2)<br/>            if settings["autoJoin"] == True:<br/>                if settings["autoReject"]["status"] == True:<br/>                    if len(group.members) > settings["autoReject"]["members"]:<br/>                        chivas.acceptGroupInvitation(op.param1)<br/>                    else:<br/>                        chivas.rejectGroupInvitation(op.param1)<br/>                else:<br/>                    chivas.acceptGroupInvitation(op.param1)<br/>            gInviMids = []<br/>            for z in group.invitee:<br/>                if z.mid in op.param3:<br/>                    gInviMids.append(z.mid)<br/>            listContact = ""<br/>            if gInviMids != []:<br/>                for j in gInviMids:<br/>                    name_ = chivas.getContact(j).displayName<br/>                    listContact += "\n      + {}".format(str(name_))<div></div>            arg = "   Group Name : {}".format(str(group.name))<br/>            arg += "\n   Executor : {}".format(str(contact.displayName))<br/>            arg += "\n   List User Invited : {}".format(str(listContact))<br/>            print (arg)<br/>                <br/>        if op.type == 17:<br/>            print ("[ 17 ]  NOTIFIED ACCEPT GROUP INVITATION")<br/>            group = chivas.getGroup(op.param1)<br/>            contact = chivas.getContact(op.param2)<br/>            arg = "   Group Name : {}".format(str(group.name))<br/>            arg += "\n   User Join : {}".format(str(contact.displayName))<br/>            print (arg)<br/>            <br/>        if op.type == 17:<br/>            if op.param2 in admin:<br/>              if op.param2 not in Bots:    <br/>                return<br/>            ginfo = chivas.getGroup(op.param1)<br/>            contact = chivas.getContact(op.param2)<br/>            image = "http://dl.profile.line-cdn.net/" + contact.pictureStatus<br/>            c = Message(to=op.param1, text=None, contentType=13)<br/>            c.contentMetadata={'mid':op.param2}<br/>            chivas.sendMessage(c)<br/>            chivas.sendText(op.param1,"Hallo " + chivas.getContact(op.param2).displayName + "\nWelcome To ☞ " + str(ginfo.name) + " ☜" + "\nBudayakan Cek Note\nDan Semoga Betah Disini ^_^")<br/>            chivas.sendImageWithURL(op.param1,image)<br/>            d = Message(to=op.param1, text=None, contentType=7)<br/>            d.contentMetadata={<br/>                                    "STKID": "247",<br/>                                    "STKPKGID": "3",<br/>                                    "STKVER": "100" }                <br/>            chivas.sendMessage(d)             <br/>            print ("MEMBER JOIN TO GROUP")<div></div>        if op.type == 19:<br/>            print ("[ 19 ] NOTIFIED KICKOUT FROM GROUP")<br/>            group = chivas.getGroup(op.param1)<br/>            contact = chivas.getContact(op.param2)<br/>            victim = chivas.getContact(op.param3)<br/>            arg = "   Group Name : {}".format(str(group.name))<br/>            arg += "\n   Executor : {}".format(str(contact.displayName))<br/>            arg += "\n   Victim : {}".format(str(victim.displayName))<br/>            print (arg)                <br/>                <br/>        if op.type == 24:<br/>            print ("[ 24 ] NOTIFIED LEAVE ROOM")<br/>            if settings["autoLeave"] == True:<br/>                chivas.leaveRoom(op.param1)<br/>#-------------------------------------------------------------------------------<br/>        if op.type == 26:<br/>            msg = op.message<br/>            if msg.contentType == 13:<br/>                if settings["wblack"] == True:<br/>                    if msg.contentMetadata["mid"] in settings["commentBlack"]:<br/>                        chivas.sendMessage(msg.to,"sudah masuk daftar hitam")<br/>                        settings["wblack"] = False<br/>                    else:<br/>                        settings["commentBlack"][msg.contentMetadata["mid"]] = True<br/>                        settings["wblack"] = False<br/>                        chivas.sendMessage(msg.to,"Itu tidak berkomentar")<br/>                elif settings["dblack"] == True:<br/>                    if msg.contentMetadata["mid"] in settings["commentBlack"]:<br/>                        del settings["commentBlack"][msg.contentMetadata["mid"]]<br/>                        chivas.sendMessage(msg.to,"Done")<br/>                        settings["dblack"] = False<br/>                    else:<br/>                        settings["dblack"] = False<br/>                        chivas.sendMessage(msg.to,"Tidak ada dalam daftar hitam")<br/>#-------------------------------------------------------------------------------<br/>                elif settings["wblacklist"] == True:<br/>                    if msg.contentMetadata["mid"] in settings["blacklist"]:<br/>                        chivas.sendMessage(msg.to,"sudah masuk daftar hitam")<br/>                        settings["wblacklist"] = False<br/>                    else:<br/>                        settings["blacklist"][msg.contentMetadata["mid"]] = True<br/>                        settings["wblacklist"] = False<br/>                        chivas.sendMessage(msg.to,"Done")<br/>                        <br/>                elif settings["dblacklist"] == True:<br/>                    if msg.contentMetadata["mid"] in settings["blacklist"]:<br/>                        del settings["blacklist"][msg.contentMetadata["mid"]]<br/>                        chivas.sendMessage(msg.to,"Done")<br/>                        settings["dblacklist"] = False<br/>                    else:<br/>                        settings["dblacklist"] = False<br/>                        chivas.sendMessage(msg.to,"Done")<br/>                        <br/>                       <br/>#-------------------------------------------------------------------------------<br/>        if op.type == 26:<br/>            print ("[ 26 ] SEND MESSAGE COMMAND")<br/>            msg = op.message<br/>            text = msg.text<br/>            msg_id = msg.id<br/>            receiver = msg.to<br/>            sender = msg._from<br/>            if msg.toType == 0:<br/>                if sender != chivas.profile.mid:<br/>                    to = sender<br/>                else:<br/>                    to = receiver<br/>            else:<br/>                to = receiver<br/>            if msg.contentType == 0:<br/>                if text is None:<br/>                    return<br/>#==============================================================================#<br/>                if text.lower() == 'help':<br/>                    helpMessage = helpmessage()<br/>                    chivas.sendMessage(to, str(helpMessage))<br/>                    chivas.sendContact(to, "uce248e9f221465beca893be9230eb45e")<br/>                elif text.lower() == 'texttospeech':<br/>                    helpTextToSpeech = helptexttospeech()<br/>                    chivas.sendMessage(to, str(helpTextToSpeech))<br/>                elif text.lower() == 'translate':<br/>                    helpTranslate = helptranslate()<br/>                    chivas.sendMessage(to, str(helpTranslate))<br/>#==============================================================================#<br/>                elif text.lower() == 'speed':<br/>                    start = time.time()<br/>                    chivas.sendMessage(to, "Please Wait...")<br/>                    elapsed_time = time.time() - start<br/>                    chivas.sendMessage(to,format(str(elapsed_time)))<br/>                elif text.lower() == 'restart':<br/>                  if msg._from in Owner:    <br/>                    chivas.sendMessage(to, "Please Wait...")<br/>                    time.sleep(5)<br/>                    chivas.sendMessage(to, "Restart Sukses")<br/>                    restartBot()<br/>                elif text.lower() == 'runtime':<br/>                    timeNow = time.time()<br/>                    runtime = timeNow - botStart<br/>                    runtime = format_timespan(runtime)<br/>                    chivas.sendMessage(to, "Bot sudah berjalan selama {}".format(str(runtime)))<br/>                elif text.lower() == 'about':<br/>                    try:<br/>                        arr = []<br/>                        owner = "uce248e9f221465beca893be9230eb45e"<br/>                        creator = chivas.getContact(owner)<br/>                        contact = chivas.getContact(chivasMID)<br/>                        grouplist = chivas.getGroupIdsJoined()<br/>                        contactlist = chivas.getAllContactIds()<br/>                        blockedlist =chivas.getBlockedContactIds()<br/>                        ret_ = "╔══[ About Self ]"<br/>                        ret_ += "\n╠ Line : {}".format(contact.displayName)<br/>                        ret_ += "\n╠ Group : {}".format(str(len(grouplist)))<br/>                        ret_ += "\n╠ Friend : {}".format(str(len(contactlist)))<br/>                        ret_ += "\n╠ Blocked : {}".format(str(len(blockedlist)))<br/>                        ret_ += "\n╠══[ About Selfbot ]"<br/>                        ret_ += "\n╠ Version : Premium"<br/>                        ret_ += "\n╠ Creator : {}".format(creator.displayName)<br/>                        ret_ += "\n╚══[ Dilarang Remake Tanpa Ijin :P ]"<br/>                        chivas.sendMessage(to, str(ret_))<br/>                    except Exception as e:<br/>                        chivas.sendMessage(msg.to, str(e))<br/>#==============================================================================#<br/>                elif text.lower() == 'status':<br/>                    try:<br/>                        ret_ = "╔══[ Status ]"<br/>                        if settings["protect"] == True: ret_ += "\n╠ Protect ✅"<br/>                        else: ret_ += "\n╠ Protect ❌"<br/>                        if settings["qrprotect"] == True: ret_ += "\n╠ Qr Protect ✅"<br/>                        else: ret_ += "\n╠ Qr Protect ❌"<br/>                        if settings["inviteprotect"] == True: ret_ += "\n╠ Invite Protect ✅"<br/>                        else: ret_ += "\n╠ Invite Protect ❌"<br/>                        if settings["cancelprotect"] == True: ret_ += "\n╠ Cancel Protect ✅"<br/>                        else: ret_ += "\n╠ Cancel Protect ❌"<br/>                        if settings["autoAdd"] == True: ret_ += "\n╠ Auto Add ✅"<br/>                        else: ret_ += "\n╠ Auto Add ❌"<br/>                        if settings["autoJoin"] == True: ret_ += "\n╠ Auto Join ✅"<br/>                        else: ret_ += "\n╠ Auto Join ❌"<br/>                        if settings["autoLeave"] == True: ret_ += "\n╠ Auto Leave ✅"<br/>                        else: ret_ += "\n╠ Auto Leave ❌"<br/>                        if settings["autoRead"] == True: ret_ += "\n╠ Auto Read ✅"<br/>                        else: ret_ += "\n╠ Auto Read ❌"<br/>                        if settings["checkSticker"] == True: ret_ += "\n╠ Check Sticker ✅"<br/>                        else: ret_ += "\n╠ Check Sticker ❌"<br/>                        if settings["detectMention"] == True: ret_ += "\n╠ Detect Mention ✅"<br/>                        else: ret_ += "\n╠ Detect Mention ❌"<br/>                        ret_ += "\n╚══[ Status ]"<br/>                        chivas.sendMessage(to, str(ret_))<br/>                    except Exception as e:<br/>                        chivas.sendMessage(msg.to, str(e))<br/>#-------------------------------------------------------------------------------<br/>                elif msg.text.lower().startswith("owneradd "):<br/>                    if msg._from in Owner:<br/>                        key = eval(msg.contentMetadata["MENTION"])<br/>                        key["MENTIONEES"][0]["M"]<br/>                        targets = []<br/>                        for x in key["MENTIONEES"]:<br/>                            targets.append(x["M"])<br/>                        for target in targets:<br/>                            try:<br/>                                Owner[target] = True<br/>                                f=codecs.open('Owner.json','w','utf-8')<br/>                                json.dump(Owner, f, sort_keys=True, indent=4,ensure_ascii=False)<br/>                                chivas.sendMessage(msg.to,"Owner ☢-Bot-☢\nAdd\nExecuted")<br/>                            except:<br/>                                pass<br/>                    else:<br/>                        chivas.sendMessage(msg.to,"Owner Permission Required")<br/>                    <br/>                elif msg.text.lower().startswith("ownerdel "):<br/>                    if msg._from in Owner:<br/>                        key = eval(msg.contentMetadata["MENTION"])<br/>                        key["MENTIONEES"][0]["M"]<br/>                        targets = []<br/>                        for x in key["MENTIONEES"]:<br/>                            targets.append(x["M"])<br/>                        for target in targets:<br/>                            try:<br/>                                del Owner[target]<br/>                                f=codecs.open('Owner.json','w','utf-8')<br/>                                json.dump(Owner, f, sort_keys=True, indent=4,ensure_ascii=False)<br/>                                chivas.sendMessage(msg.to,"Owner ☢-Bot-☢\nRemove\nExecuted")<br/>                            except:<br/>                                pass<br/>                    else:<br/>                        chivas.sendMessage(msg.to,"Owner Permission Required")<br/>#-------------------------------------------------------------------------------<br/>                elif text.lower() == 'ownerlist':<br/>                    if msg._from in Owner:<br/>                        if Owner == []:<br/>                            chivas.sendMessage(msg.to,"The Ownerlist is empty")<br/>                        else:<br/>                            chivas.sendMessage(msg.to,"Tunggu...")<br/>                            mc = "╔═════════════\n╠▁ ▂ ▄ ▅ ▆ ▇ █ [  Chivas ] █ ▇ ▆ ▅ ▄ ▂ ▁ ╠══✪〘 Owner List 〙✪═══\n"<br/>                            for mi_d in admin:<br/>                                mc += "╠✪ " +chivas.getContact(mi_d).displayName + "\n"<br/>                            chivas.sendMessage(msg.to,mc + "╠═══════════════\n╠✪〘 line.me/ti/p/~chivas. 〙\n╚═══════════════")<br/>#-------------------------------------------------------------------------------<br/>                elif msg.text.lower().startswith("adminadd "):<br/>                    if msg._from in Owner:<br/>                        targets = []<br/>                        key = eval(msg.contentMetadata["MENTION"])<br/>                        key["MENTIONEES"][0]["M"]<br/>                        for x in key["MENTIONEES"]:<br/>                            targets.append(x["M"])<br/>                        for target in targets:<br/>                            try:<br/>                                admin[target] = True<br/>                                f=codecs.open('admin.json','w','utf-8')<br/>                                json.dump(admin, f, sort_keys=True, indent=4,ensure_ascii=False)<br/>                                chivas.sendMessage(msg.to,"Admin ☢-Bot-☢\nAdd\nExecuted")<br/>                                break<br/>                            except:<br/>                                chivas.sendMessage(msg.to,"Added Target Fail !")<br/>                                break<br/>                    else:<br/>                        chivas.sendMessage(msg.to,"Owner Permission Required")<br/>                    <br/>                elif msg.text.lower().startswith("admindel "):<br/>                    if msg._from in Owner:<br/>                        targets = []<br/>                        key = eval(msg.contentMetadata["MENTION"])<br/>                        key["MENTIONEES"][0]["M"]<br/>                        for x in key["MENTIONEES"]:<br/>                            targets.append(x["M"])<br/>                        for target in targets:<br/>                            try:<br/>                                del admin[target]<br/>                                f=codecs.open('admin.json','w','utf-8')<br/>                                json.dump(admin, f, sort_keys=True, indent=4,ensure_ascii=False)<br/>                                chivas.sendMessage(msg.to,"Admin ☢-Bot-☢\nRemove\nExecuted")<br/>                                break<br/>                            except:<br/>                                chivas.sendMessage(msg.to,"Deleted Target Fail !")<br/>                            break<br/>                    else:<br/>                        chivas.sendMessage(msg.to,"Owner Permission Required")<br/>#-------------------------------------------------------------------------------<br/>                elif text.lower() == 'adminlist':<br/>                    if msg._from in Owner:<br/>                        if admin == []:<br/>                            chivas.sendMessage(msg.to,"The Adminlist is empty")<br/>                        else:<br/>                            chivas.sendMessage(msg.to,"Tunggu...")<br/>                            mc = "╔═══════════════\n╠▁ ▂ ▄ ▅ ▆ ▇ █ [  Chivas ] █ ▇ ▆ ▅ ▄ ▂ ▁\n╠══✪〘 Admin List 〙✪═══\n"<br/>                            for mi_d in admin:<br/>                                mc += "╠✪ " +chivas.getContact(mi_d).displayName + "\n"<br/>                            chivas.sendMessage(msg.to,mc + "╠═══════════════\n╠✪〘 line.me/ti/p/~chivas. 〙\n╚═══════════════")<br/>#-------------------------------------------------------------------------------<br/>                elif text.lower() == 'protect on':<br/>                    if msg._from in Owner:<br/>                        if settings["protect"] == True:<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Already On")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Set To On")<br/>                        else:<br/>                            settings["protect"] = True<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Set To On")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Already On")<br/>                                <br/>                elif text.lower() == 'protect off':<br/>                    if msg._from in Owner:<br/>                        if settings["protect"] == False:<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Already Off")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Set To Off")<br/>                        else:<br/>                            settings["protect"] = False<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Set To Off")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Already Off")<br/>#----------------------------------------------------------------------------------------                        <br/>                elif text.lower() == 'qrprotect on':<br/>                    if msg._from in Owner:<br/>                        if settings["qrprotect"] == True:<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Qr Already On")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Qr Set To On")<br/>                        else:<br/>                            settings["qrprotect"] = True<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Qr Set To On")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Qr Already On")<br/>                                <br/>                elif text.lower() == 'qrprotect off':<br/>                    if msg._from in Owner:<br/>                        if settings["qrprotect"] == False:<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Qr Already Off")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Qr Set To Off")<br/>                        else:<br/>                            settings["qrprotect"] = False<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Qr Set To Off")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Qr Already Off")<br/>#-------------------------------------------------------------------------------<br/>                elif text.lower() == 'inviteprotect on':<br/>                    if msg._from in Owner:<br/>                        if settings["inviteprotect"] == True:<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Invite Already On")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Invite Set To On")<br/>                        else:<br/>                            settings["inviteprotect"] = True<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Invite Set To On")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Invite Already On")<br/>                                <br/>                elif text.lower() == 'inviteprotect off':<br/>                    if msg._from in Owner:<br/>                        if settings["inviteprotect"] == False:<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Invite Already Off")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Invite Set To Off")<br/>                        else:<br/>                            settings["inviteprotect"] = False<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Invite Set To Off")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Invite Already Off")<br/>#-------------------------------------------------------------------------------<br/>                elif text.lower() == 'cancelprotect on':<br/>                    if msg._from in Owner:<br/>                        if settings["cancelprotect"] == True:<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Cancel Invite Already On")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Cancel Invite Set To On")<br/>                        else:<br/>                            settings["cancelprotect"] = True<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Cancel Invite Set To On")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Cancel Invite Already On")<br/>                                <br/>                elif text.lower() == 'cancelprotect off':<br/>                    if msg._from in Owner:<br/>                        if settings["cancelprotect"] == False:<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Cancel Invite Already Off")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Cancel Invite Set To Off")<br/>                        else:<br/>                            settings["cancelprotect"] = False<br/>                            if settings["lang"] == "JP":<br/>                                chivas.sendMessage(msg.to,"➲ Protection Cancel Invite Set To Off")<br/>                            else:<br/>                                chivas.sendMessage(msg.to,"➲ Protection Cancel Invite Already Off")<br/>#-------------------------------------------------------------------------------<br/>                elif text.lower() == 'setpro on':<br/>                    if msg._from in Owner:<br/>                        settings["protect"] = True<br/>                        settings["qrprotect"] = True<br/>                        settings["inviteprotect"] = True<br/>                        settings["cancelprotect"] = True<br/>                        chivas.sendMessage(msg.to,"➲ All Protect Set To On")<br/>                    else:<br/>                        chivas.sendMessage(msg.to,"Just for Owner")<br/>                        		            <br/>                elif text.lower() == 'setpro off':<br/>                    if msg._from in Owner:<br/>                        settings["protect"] = False<br/>                        settings["qrprotect"] = False<br/>                        settings["inviteprotect"] = False<br/>                        settings["cancelprotect"] = False<br/>                        chivas.sendMessage(msg.to,"➲ All Protect Set To Off")<br/>                    else:<br/>                        chivas.sendMessage(msg.to,"Just for Owner")<br/>#-------------------------------------------------------------------------------<br/>                elif text.lower() == 'autoadd on':<br/>                    settings["autoAdd"] = True<br/>                    chivas.sendMessage(to, "Berhasil mengaktifkan Auto Add")<br/>                elif text.lower() == 'autoadd off':<br/>                    settings["autoAdd"] = False<br/>                    chivas.sendMessage(to, "Berhasil menonaktifkan Auto Add")<br/>                elif text.lower() == 'autojoin on':<br/>                  if msg._from in Owner:    <br/>                    settings["autoJoin"] = True<br/>                    chivas.sendMessage(to, "Berhasil mengaktifkan Auto Join")<br/>                elif text.lower() == 'autojoin off':<br/>                  if msg._from in Owner:    <br/>                    settings["autoJoin"] = False<br/>                    chivas.sendMessage(to, "Berhasil menonaktifkan Auto Join")<br/>                elif text.lower() == 'autoleave on':<br/>                  if msg._from in Owner:<br/>                    settings["autoLeave"] = True<br/>                    chivas.sendMessage(to, "Berhasil mengaktifkan Auto Leave")<br/>                elif text.lower() == 'autoleave off':<br/>                  if msg._from in Owner:<br/>                    settings["autoLeave"] = False<br/>                    chivas.sendMessage(to, "Berhasil menonaktifkan Auto Leave")<br/>                elif text.lower() == 'autoread on':<br/>                    settings["autoRead"] = True<br/>                    chivas.sendMessage(to, "Berhasil mengaktifkan Auto Read")<br/>                elif text.lower() == 'autoread off':<br/>                    settings["autoRead"] = False<br/>                    chivas.sendMessage(to, "Berhasil menonaktifkan Auto Read")<br/>                elif text.lower() == 'checksticker on':<br/>                    settings["checkSticker"] = True<br/>                    chivas.sendMessage(to, "Berhasil mengaktifkan Check Details Sticker")<br/>                elif text.lower() == 'checksticker off':<br/>                    settings["checkSticker"] = False<br/>                    chivas.sendMessage(to, "Berhasil menonaktifkan Check Details Sticker")<br/>                elif text.lower() == 'detectmention on':<br/>                    settings["datectMention"] = True<br/>                    chivas.sendMessage(to, "Berhasil mengaktifkan Detect Mention")<br/>                elif text.lower() == 'detectmention off':<br/>                    settings["datectMention"] = False<br/>                    chivas.sendMessage(to, "Berhasil menonaktifkan Detect Mention")<br/>                elif text.lower() == 'autojoinlink on':<br/>                    settings["autoJoinTicket"] = True<br/>                    chivas.sendMessage(to, "Berhasil mengaktifkan Auto Join Link")<br/>                elif text.lower() == 'autojoinlink off':<br/>                    settings["autoJoinTicket"] = False<br/>                    chivas.sendMessage(to, "Berhasil menonaktifkan Auto Join Link")                    <br/>#==============================================================================#<br/>                elif text.lower() == "respon":<br/>                    chivas.sendMessage(msg.to,responsename)<br/>                    ki.sendMessage(msg.to,responsename2)<br/>                    ki2.sendMessage(msg.to,responsename3)<br/>                    ki3.sendMessage(msg.to,responsename4)<br/>                    ki4.sendMessage(msg.to,responsename5)<br/>                    <br/>                elif msg.text.lower() == 'absen':<br/>                    if msg._from in Owner:<br/>                        chivas.sendContact(to,chivasMID)<br/>                        ki.sendContact(to, kiMID)<br/>                        ki2.sendContact(to, ki2MID)<br/>                        ki3.sendContact(to, ki3MID)<br/>                        ki4.sendContact(to, ki4MID)<br/>                        <br/>                elif text.lower() in ["byeall"]:<br/>                  if msg._from in Owner:    <br/>                    ki.leaveGroup(msg.to)<br/>                    ki2.leaveGroup(msg.to)<br/>                    ki3.leaveGroup(msg.to)<br/>                    ki4.leaveGroup(msg.to)<br/>               <br/>                elif text.lower() in ["joinall"]:<br/>                  if msg._from in Owner:    <br/>                    G = chivas.getGroup(msg.to)<br/>                    ginfo = chivas.getGroup(msg.to)<br/>                    G.preventedJoinByTicket = False<br/>                    chivas.updateGroup(G)<br/>                    invsend = 0<br/>                    Ticket = chivas.reissueGroupTicket(msg.to)<br/>                    ki.acceptGroupInvitationByTicket(msg.to,Ticket)<br/>                    ki2.acceptGroupInvitationByTicket(msg.to,Ticket)<br/>                    ki3.acceptGroupInvitationByTicket(msg.to,Ticket)<br/>                    ki4.acceptGroupInvitationByTicket(msg.to,Ticket)<br/>                    G = chivas.getGroup(msg.to)<br/>                    G.preventedJoinByTicket = True<br/>                    chivas.updateGroup(G)<br/>                    G.preventedJoinByTicket(G)<br/>                    chivas.updateGroup(G)<br/>                <br/>                elif text.lower() == 'me':<br/>                    sendMessageWithMention(to,chivasMID)<br/>                    chivas.sendContact(to, chivasMID)<br/>                elif text.lower() == 'mymid':<br/>                    chivas.sendMessage(msg.to,"[MID]\n" +  chivasMID)<br/>                elif text.lower() == 'myname':<br/>                    me = chivas.getContact(chivasMID)<br/>                    chivas.sendMessage(msg.to,"[DisplayName]\n" + me.displayName)<br/>                elif text.lower() == 'mybio':<br/>                    me = chivas.getContact(chivasMID)<br/>                    chivas.sendMessage(msg.to,"[StatusMessage]\n" + me.statusMessage)<br/>                elif text.lower() == 'mypicture':<br/>                    me = chivas.getContact(chivasMID)<br/>                    chivas.sendImageWithURL(msg.to,"http://dl.profile.line-cdn.net/" + me.pictureStatus)<br/>                elif text.lower() == 'myvideoprofile':<br/>                    me = chivas.getContact(chivasMID)<br/>                    chivas.sendVideoWithURL(msg.to,"http://dl.profile.line-cdn.net/" + me.pictureStatus + "/vp")<br/>                elif text.lower() == 'mycover':<br/>                    me = chivas.getContact(chivasMID)<br/>                    cover = chivas.getProfileCoverURL(chivasMID)    <br/>                    chivas.sendImageWithURL(msg.to, cover)<br/>                elif msg.text.lower().startswith("stealcontact "):<br/>                    if 'MENTION' in msg.contentMetadata.keys()!= None:<br/>                        names = re.findall(r'@(\w+)', text)<br/>                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])<br/>                        mentionees = mention['MENTIONEES']<br/>                        lists = []<br/>                        for mention in mentionees:<br/>                            if mention["M"] not in lists:<br/>                                lists.append(mention["M"])<br/>                        for ls in lists:<br/>                            contact = chivas.getContact(ls)<br/>                            mi_d = contact.mid<br/>                            chivas.sendContact(msg.to, mi_d)<br/>                elif msg.text.lower().startswith("stealmid "):<br/>                    if 'MENTION' in msg.contentMetadata.keys()!= None:<br/>                        names = re.findall(r'@(\w+)', text)<br/>                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])<br/>                        mentionees = mention['MENTIONEES']<br/>                        lists = []<br/>                        for mention in mentionees:<br/>                            if mention["M"] not in lists:<br/>                                lists.append(mention["M"])<br/>                        ret_ = "[ Mid User ]"<br/>                        for ls in lists:<br/>                            ret_ += "\n{}" + ls<br/>                        chivas.sendMessage(msg.to, str(ret_))<br/>                elif msg.text.lower().startswith("stealname "):<br/>                    if 'MENTION' in msg.contentMetadata.keys()!= None:<br/>                        names = re.findall(r'@(\w+)', text)<br/>                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])<br/>                        mentionees = mention['MENTIONEES']<br/>                        lists = []<br/>                        for mention in mentionees:<br/>                            if mention["M"] not in lists:<br/>                                lists.append(mention["M"])<br/>                        for ls in lists:<br/>                            contact = chivas.getContact(ls)<br/>                            chivas.sendMessage(msg.to, "[ Display Name ]\n" + contact.displayName)<br/>                elif msg.text.lower().startswith("stealbio "):<br/>                    if 'MENTION' in msg.contentMetadata.keys()!= None:<br/>                        names = re.findall(r'@(\w+)', text)<br/>                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])<br/>                        mentionees = mention['MENTIONEES']<br/>                        lists = []<br/>                        for mention in mentionees:<br/>                            if mention["M"] not in lists:<br/>                                lists.append(mention["M"])<br/>                        for ls in lists:<br/>                            contact = chivas.getContact(ls)<br/>                            chivas.sendMessage(msg.to, "[ Status Message ]\n{}" + contact.statusMessage)<br/>                elif msg.text.lower().startswith("stealpicture "):<br/>                    if 'MENTION' in msg.contentMetadata.keys()!= None:<br/>                        names = re.findall(r'@(\w+)', text)<br/>                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])<br/>                        mentionees = mention['MENTIONEES']<br/>                        lists = []<br/>                        for mention in mentionees:<br/>                            if mention["M"] not in lists:<br/>                                lists.append(mention["M"])<br/>                        for ls in lists:<br/>                            path = "http://dl.profile.chivas.naver.jp/" + chivas.getContact(ls).pictureStatus<br/>                            chivas.sendImageWithURL(msg.to, str(path))<br/>                elif msg.text.lower().startswith("stealvideoprofile "):<br/>                    if 'MENTION' in msg.contentMetadata.keys()!= None:<br/>                        names = re.findall(r'@(\w+)', text)<br/>                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])<br/>                        mentionees = mention['MENTIONEES']<br/>                        lists = []<br/>                        for mention in mentionees:<br/>                            if mention["M"] not in lists:<br/>                                lists.append(mention["M"])<br/>                        for ls in lists:<br/>                            path = "http://dl.profile.chivas.naver.jp/" + chivas.getContact(ls).pictureStatus + "/vp"<br/>                            chivas.sendImageWithURL(msg.to, str(path))<br/>                elif msg.text.lower().startswith("stealcover "):<br/>                    if line != None:<br/>                        if 'MENTION' in msg.contentMetadata.keys()!= None:<br/>                            names = re.findall(r'@(\w+)', text)<br/>                            mention = ast.literal_eval(msg.contentMetadata['MENTION'])<br/>                            mentionees = mention['MENTIONEES']<br/>                            lists = []<br/>                            for mention in mentionees:<br/>                                if mention["M"] not in lists:<br/>                                    lists.append(mention["M"])<br/>                            for ls in lists:<br/>                                path = chivas.getProfileCoverURL(ls)<br/>                                chivas.sendImageWithURL(msg.to, str(path))<br/>                elif msg.text.lower().startswith("cloneprofile "):<br/>                  if msg._from in Owner:    <br/>                    if 'MENTION' in msg.contentMetadata.keys()!= None:<br/>                        names = re.findall(r'@(\w+)', text)<br/>                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])<br/>                        mentionees = mention['MENTIONEES']<br/>                        for mention in mentionees:<br/>                            contact = mention["M"]<br/>                            break<br/>                        try:<br/>                            chivas.cloneContactProfile(contact)<br/>                            chivas.sendMessage(msg.to, "Berhasil clone member tunggu beberapa saat sampai profile berubah")<br/>                        except:<br/>                            chivas.sendMessage(msg.to, "Gagal clone member")<br/>                elif text.lower() == 'restoreprofile':<br/>                  if msg._from in Owner:    <br/>                    try:<br/>                        chivasProfile.displayName = str(myProfile["displayName"])<br/>                        chivasProfile.statusMessage = str(myProfile["statusMessage"])<br/>                        chivasProfile.pictureStatus = str(myProfile["pictureStatus"])<br/>                        chivas.updateProfileAttribute(8, chivasProfile.pictureStatus)<br/>                        chivas.updateProfile(chivasProfile)<br/>                        chivas.sendMessage(msg.to, "Berhasil restore profile tunggu beberapa saat sampai profile berubah")<br/>                    except:<br/>                        chivas.sendMessage(msg.to, "Gagal restore profile")<br/>#==============================================================================#<br/>                elif msg.text.lower().startswith("mimicadd "):<br/>                    targets = []<br/>                    key = eval(msg.contentMetadata["MENTION"])<br/>                    key["MENTIONEES"][0]["M"]<br/>                    for x in key["MENTIONEES"]:<br/>                        targets.append(x["M"])<br/>                    for target in targets:<br/>                        try:<br/>                            settings["mimic"]["target"][target] = True<br/>                            chivas.sendMessage(msg.to,"Target ditambahkan!")<br/>                            break<br/>                        except:<br/>                            chivas.sendMessage(msg.to,"Added Target Fail !")<br/>                            break<br/>                elif msg.text.lower().startswith("mimicdel "):<br/>                    targets = []<br/>                    key = eval(msg.contentMetadata["MENTION"])<br/>                    key["MENTIONEES"][0]["M"]<br/>                    for x in key["MENTIONEES"]:<br/>                        targets.append(x["M"])<br/>                    for target in targets:<br/>                        try:<br/>                            del settings["mimic"]["target"][target]<br/>                            chivas.sendMessage(msg.to,"Target dihapuskan!")<br/>                            break<br/>                        except:<br/>                            chivas.sendMessage(msg.to,"Deleted Target Fail !")<br/>                            break<br/>                elif text.lower() == 'mimiclist':<br/>                    if settings["mimic"]["target"] == {}:<br/>                        chivas.sendMessage(msg.to,"Tidak Ada Target")<br/>                    else:<br/>                        mc = "╔══[ Mimic List ]"<br/>                        for mi_d in settings["mimic"]["target"]:<br/>                            mc += "\n╠ "+chivas.getContact(mi_d).displayName<br/>                        chivas.sendMessage(msg.to,mc + "\n╚══[ Finish ]")<br/>                    <br/>                elif "mimic" in msg.text.lower():<br/>                    sep = text.split(" ")<br/>                    mic = text.replace(sep[0] + " ","")<br/>                    if mic == "on":<br/>                        if settings["mimic"]["status"] == False:<br/>                            settings["mimic"]["status"] = True<br/>                            chivas.sendMessage(msg.to,"Reply Message on")<br/>                    elif mic == "off":<br/>                        if settings["mimic"]["status"] == True:<br/>                            settings["mimic"]["status"] = False<br/>                            chivas.sendMessage(msg.to,"Reply Message off")<br/>#==============================================================================#<br/>                elif text.lower() == 'groupcreator':<br/>                    group = chivas.getGroup(to)<br/>                    GS = group.creator.mid<br/>                    chivas.sendContact(to, GS)<br/>                elif text.lower() == 'groupid':<br/>                    gid = chivas.getGroup(to)<br/>                    chivas.sendMessage(to, "[ID Group : ]\n" + gid.id)<br/>                elif text.lower() == 'grouppicture':<br/>                    group = chivas.getGroup(to)<br/>                    path = "http://dl.profile.line-cdn.net/" + group.pictureStatus<br/>                    chivas.sendImageWithURL(to, path)<br/>                elif text.lower() == 'groupname':<br/>                    gid = na.getGroup(to)<br/>                    chivas.sendMessage(to, "[Nama Group : ]\n" + gid.name)<br/>                elif text.lower() == 'groupticket':<br/>                    if msg.toType == 2:<br/>                        group = chivas.getGroup(to)<br/>                        if group.preventedJoinByTicket == False:<br/>                            ticket = chivas.reissueGroupTicket(to)<br/>                            chivas.sendMessage(to, "[ Group Ticket ]\nhttps://line.me/R/ti/g/{}".format(str(ticket)))<br/>                        else:<br/>                            chivas.sendMessage(to, "Grup qr tidak terbuka silahkan buka terlebih dahulu dengan perintah {}openqr".format(str(settings["keyCommand"])))<br/>                elif text.lower() == 'groupticket on':<br/>                    if msg.toType == 2:<br/>                        group = chivas.getGroup(to)<br/>                        if group.preventedJoinByTicket == False:<br/>                            chivas.sendMessage(to, "Grup qr sudah terbuka")<br/>                        else:<br/>                            group.preventedJoinByTicket = False<br/>                            chivas.updateGroup(group)<br/>                            chivas.sendMessage(to, "Berhasil membuka grup qr")<br/>                elif text.lower() == 'groupticket off':<br/>                    if msg.toType == 2:<br/>                        group = chivas.getGroup(to)<br/>                        if group.preventedJoinByTicket == True:<br/>                            chivas.sendMessage(to, "Grup qr sudah tertutup")<br/>                        else:<br/>                            group.preventedJoinByTicket = True<br/>                            chivas.updateGroup(group)<br/>                            chivas.sendMessage(to, "Berhasil menutup grup qr")<br/>                elif text.lower() == 'groupinfo':<br/>                    group = chivas.getGroup(to)<br/>                    try:<br/>                        gCreator = group.creator.displayName<br/>                    except:<br/>                        gCreator = "Tidak ditemukan"<br/>                    if group.invitee is None:<br/>                        gPending = "0"<br/>                    else:<br/>                        gPending = str(len(group.invitee))<br/>                    if group.preventedJoinByTicket == True:<br/>                        gQr = "Tertutup"<br/>                        gTicket = "Tidak ada"<br/>                    else:<br/>                        gQr = "Terbuka"<br/>                        gTicket = "https://line.me/R/ti/g/{}".format(str(chivas.reissueGroupTicket(group.id)))<br/>                    path = "http://dl.profile.line-cdn.net/" + group.pictureStatus<br/>                    ret_ = "╔══[ Group Info ]"<br/>                    ret_ += "\n╠ Nama Group : {}".format(str(group.name))<br/>                    ret_ += "\n╠ ID Group : {}".format(group.id)<br/>                    ret_ += "\n╠ Pembuat : {}".format(str(gCreator))<br/>                    ret_ += "\n╠ Jumlah Member : {}".format(str(len(group.members)))<br/>                    ret_ += "\n╠ Jumlah Pending : {}".format(gPending)<br/>                    ret_ += "\n╠ Group Qr : {}".format(gQr)<br/>                    ret_ += "\n╠ Group Ticket : {}".format(gTicket)<br/>                    ret_ += "\n╚══[ Finish ]"<br/>                    chivas.sendMessage(to, str(ret_))<br/>                    chivas.sendImageWithURL(to, path)<br/>                elif text.lower() == 'groupmemberlist':<br/>                    if msg.toType == 2:<br/>                        group = chivas.getGroup(to)<br/>                        ret_ = "╔══[ Member List ]"<br/>                        no = 0 + 1<br/>                        for mem in group.members:<br/>                            ret_ += "\n╠ {}. {}".format(str(no), str(mem.displayName))<br/>                            no += 1<br/>                        ret_ += "\n╚══[ Total {} ]".format(str(len(group.members)))<br/>                        chivas.sendMessage(to, str(ret_))<br/>                elif text.lower() == 'grouplist':<br/>                        groups = chivas.groups<br/>                        ret_ = "╔══[ Group List ]"<br/>                        no = 0 + 1<br/>                        for gid in groups:<br/>                            group = chivas.getGroup(gid)<br/>                            ret_ += "\n╠ {}. {} | {}".format(str(no), str(group.name), str(len(group.members)))<br/>                            no += 1<br/>                        ret_ += "\n╚══[ Total {} Groups ]".format(str(len(groups)))<br/>                        chivas.sendMessage(to, str(ret_))<br/>#-------------------------------------------------------------------------------<br/>                elif text.lower() == 'clearban':<br/>                    if msg._from in Owner:<br/>                        settings["blacklist"] = {}<br/>                        chivas.sendMessage(msg.to,"Blacklist Dibersihkan")<br/>                        <br/>                elif text.lower() == 'bancontact':<br/>                    if msg._from in Owner:<br/>                        settings["wblacklist"] = True<br/>                        chivas.sendMessage(msg.to,"Send Contact")<br/>                        <br/>                elif msg.text in ["unbancontact"]:<br/>                    if msg._from in Owner:<br/>                        settings["dblacklist"] = True<br/>                        chivas.sendMessage(msg.to,"Send Contact")<br/>#-------------------------------------------------------------------------------<br/>                elif text.lower() == 'banlist':<br/>                    if msg._from in Owner:<br/>                        if settings["blacklist"] == {}:<br/>                            chivas.sendMessage(msg.to,"Tidak Ada Banlist")<br/>                        else:<br/>                            chivas.sendMessage(msg.to,"Daftar Banlist")<br/>                            num=1<br/>                            msgs="══════════List Blacklist═════════"<br/>                            for mi_d in settings["blacklist"]:<br/>                                msgs+="\n[%i] %s" % (num, chivas.getContact(mi_d).displayName)<br/>                                num=(num+1)<br/>                            msgs+="\n══════════List Blacklist═════════\n\nTotal Blacklist :  %i" % len(settings["blacklist"])<br/>                            chivas.sendMessage(msg.to, msgs)<br/>#=======================================================================================<br/>                elif msg.text.lower().startswith("kill "):<br/>                    if msg._from in Owner:<br/>                       targets = []<br/>                       key = eval(msg.contentMetadata["MENTION"])<br/>                       key["MENTIONEES"][0]["M"]<br/>                       for x in key["MENTIONEES"]:<br/>                           targets.append(x["M"])<br/>                       for target in targets:<br/>                           try:<br/>                               random.choice(KAC).kickoutFromGroup(msg.to,[target])<br/>                           except:<br/>                               random.choice(KAC).sendText(msg.to,"Error")<br/>#-------------------------------------------------------------------------------<br/>                elif text.lower() == 'kickallmember':<br/>                    if msg._from in Owner:<br/>                        if msg.toType == 2:<br/>                            print ("[ 19 ] KICK ALL MEMBER")<br/>                            _name = msg.text.replace("kickallmember","")<br/>                            gs = chivas.getGroup(msg.to)<br/>                            gs = ki.getGroup(msg.to)<br/>                            gs = ki2.getGroup(msg.to)<br/>                            gs = ki3.getGroup(msg.to)<br/>                            gs = ki4.getGroup(msg.to)<br/>    #                       chivas.sendMessage(msg.to,"「 Bye All 」")<br/>    #                       chivas.sendMessage(msg.to,"「 Sory guys 」")<br/>                            targets = []<br/>                            for g in gs.members:<br/>                                if _name in g.displayName:<br/>                                    targets.append(g.mid)<br/>                            if targets == []:<br/>                                chivas.sendMessage(msg.to,"Not Found")<br/>                            else:<br/>                                for target in targets:<br/>                                    if not target in Bots:<br/>                                        if not target in Owner:<br/>                                            if not target in admin:<br/>                                                try:<br/>                                                    klist=[line,ki,ki2,ki3,ki4]<br/>                                                    kicker=random.choice(klist)<br/>                                                    kicker.kickoutFromGroup(msg.to,[target])<br/>                                                    print (msg.to,[g.mid])<br/>                                                except:<br/>                                                    chivas.sendMessage(msg.to,"") <br/>#==============================================================================#          <br/>                elif text.lower() == 'mention':<br/>                    group = chivas.getGroup(msg.to)<br/>                    nama = [contact.mid for contact in group.members]<br/>                    k = len(nama)//100<br/>                    for a in range(k+1):<br/>                        txt = u''<br/>                        s=0<br/>                        b=[]<br/>                        for i in group.members[a*100 : (a+1)*100]:<br/>                            b.append({"S":str(s), "E" :str(s+6), "M":i.mid})<br/>                            s += 7<br/>                            txt += u'@Alin \n'<br/>                        chivas.sendMessage(to, text=txt, contentMetadata={u'MENTION': json.dumps({'MENTIONEES':b})}, contentType=0)<br/>                        chivas.sendMessage(to, "Total {} Mention".format(str(len(nama))))          <br/>                elif text.lower() == 'lurking on':<br/>                    tz = pytz.timezone("Asia/Jakarta")<br/>                    timeNow = datetime.now(tz=tz)<br/>                    day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]<br/>                    hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]<br/>                    bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]<br/>                    hr = timeNow.strftime("%A")<br/>                    bln = timeNow.strftime("%m")<br/>                    for i in range(len(day)):<br/>                        if hr == day[i]: hasil = hari[i]<br/>                    for k in range(0, len(bulan)):<br/>                        if bln == str(k): bln = bulan[k-1]<br/>                    readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\nJam : [ " + timeNow.strftime('%H:%M:%S') + " ]"<br/>                    if msg.to in read['readPoint']:<br/>                            try:<br/>                                del read['readPoint'][msg.to]<br/>                                del read['readMember'][msg.to]<br/>                                del read['readTime'][msg.to]<br/>                            except:<br/>                                pass<br/>                            read['readPoint'][msg.to] = msg.id<br/>                            read['readMember'][msg.to] = ""<br/>                            read['readTime'][msg.to] = datetime.now().strftime('%H:%M:%S')<br/>                            read['ROM'][msg.to] = {}<br/>                            with open('read.json', 'w') as fp:<br/>                                json.dump(read, fp, sort_keys=True, indent=4)<br/>                                chivas.sendMessage(msg.to,"Lurking already on")<br/>                    else:<br/>                        try:<br/>                            del read['readPoint'][msg.to]<br/>                            del read['readMember'][msg.to]<br/>                            del read['readTime'][msg.to]<br/>                        except:<br/>                            pass<br/>                        read['readPoint'][msg.to] = msg.id<br/>                        read['readMember'][msg.to] = ""<br/>                        read['readTime'][msg.to] = datetime.now().strftime('%H:%M:%S')<br/>                        read['ROM'][msg.to] = {}<br/>                        with open('read.json', 'w') as fp:<br/>                            json.dump(read, fp, sort_keys=True, indent=4)<br/>                            chivas.sendMessage(msg.to, "Set reading point:\n" + readTime)<br/>                            <br/>                elif text.lower() == 'lurking off':<br/>                    tz = pytz.timezone("Asia/Jakarta")<br/>                    timeNow = datetime.now(tz=tz)<br/>                    day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]<br/>                    hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]<br/>                    bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]<br/>                    hr = timeNow.strftime("%A")<br/>                    bln = timeNow.strftime("%m")<br/>                    for i in range(len(day)):<br/>                        if hr == day[i]: hasil = hari[i]<br/>                    for k in range(0, len(bulan)):<br/>                        if bln == str(k): bln = bulan[k-1]<br/>                    readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\nJam : [ " + timeNow.strftime('%H:%M:%S') + " ]"<br/>                    if msg.to not in read['readPoint']:<br/>                        chivas.sendMessage(msg.to,"Lurking already off")<br/>                    else:<br/>                        try:<br/>                            del read['readPoint'][msg.to]<br/>                            del read['readMember'][msg.to]<br/>                            del read['readTime'][msg.to]<br/>                        except:<br/>                              pass<br/>                        chivas.sendMessage(msg.to, "Delete reading point:\n" + readTime)<br/>    <br/>                elif text.lower() == 'lurking reset':<br/>                    tz = pytz.timezone("Asia/Jakarta")<br/>                    timeNow = datetime.now(tz=tz)<br/>                    day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]<br/>                    hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]<br/>                    bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]<br/>                    hr = timeNow.strftime("%A")<br/>                    bln = timeNow.strftime("%m")<br/>                    for i in range(len(day)):<br/>                        if hr == day[i]: hasil = hari[i]<br/>                    for k in range(0, len(bulan)):<br/>                        if bln == str(k): bln = bulan[k-1]<br/>                    readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\nJam : [ " + timeNow.strftime('%H:%M:%S') + " ]"<br/>                    if msg.to in read["readPoint"]:<br/>                        try:<br/>                            del read["readPoint"][msg.to]<br/>                            del read["readMember"][msg.to]<br/>                            del read["readTime"][msg.to]<br/>                        except:<br/>                            pass<br/>                        chivas.sendMessage(msg.to, "Reset reading point:\n" + readTime)<br/>                    else:<br/>                        chivas.sendMessage(msg.to, "Lurking belum diaktifkan ngapain di reset?")<br/>                        <br/>                elif text.lower() == 'lurking':<br/>                    tz = pytz.timezone("Asia/Jakarta")<br/>                    timeNow = datetime.now(tz=tz)<br/>                    day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]<br/>                    hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]<br/>                    bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]<br/>                    hr = timeNow.strftime("%A")<br/>                    bln = timeNow.strftime("%m")<br/>                    for i in range(len(day)):<br/>                        if hr == day[i]: hasil = hari[i]<br/>                    for k in range(0, len(bulan)):<br/>                        if bln == str(k): bln = bulan[k-1]<br/>                    readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\nJam : [ " + timeNow.strftime('%H:%M:%S') + " ]"<br/>                    if receiver in read['readPoint']:<br/>                        if read["ROM"][receiver].items() == []:<br/>                            chivas.sendMessage(receiver,"[ Reader ]:\nNone")<br/>                        else:<br/>                            chiya = []<br/>                            for rom in read["ROM"][receiver].items():<br/>                                chiya.append(rom[1])<br/>                            cmem = chivas.getContacts(chiya) <br/>                            zx = ""<br/>                            zxc = ""<br/>                            zx2 = []<br/>                            xpesan = '[ Reader ]:\n'<br/>                        for x in range(len(cmem)):<br/>                            xname = str(cmem[x].displayName)<br/>                            pesan = ''<br/>                            pesan2 = pesan+"@c\n"<br/>                            xlen = str(len(zxc)+len(xpesan))<br/>                            xlen2 = str(len(zxc)+len(pesan2)+len(xpesan)-1)<br/>                            zx = {'S':xlen, 'E':xlen2, 'M':cmem[x].mid}<br/>                            zx2.append(zx)<br/>                            zxc += pesan2<br/>                        text = xpesan+ zxc + "\n[ Lurking time ]: \n" + readTime<br/>                        try:<br/>                            chivas.sendMessage(receiver, text, contentMetadata={'MENTION':str('{"MENTIONEES":'+json.dumps(zx2).replace(' ','')+'}')}, contentType=0)<br/>                        except Exception as error:<br/>                            print (error)<br/>                        pass<br/>                    else:<br/>                        chivas.sendMessage(receiver,"Lurking has not been set.")<br/>                        <br/>#==============================================================================#<br/>                elif msg.text.lower().startswith("say-af "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'af'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>        <br/>                elif msg.text.lower().startswith("say-sq "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'sq'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-ar "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'ar'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-hy "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'hy'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-bn "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'bn'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-ca "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'ca'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-zh "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'zh'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-zh-cn "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'zh-cn'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-zh-tw "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'zh-tw'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-zh-yue "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'zh-yue'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-hr "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'hr'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-cs "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'cs'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-da "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'da'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-nl "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'nl'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-en "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'en'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-en-au "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'en-au'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-en-uk "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'en-uk'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-en-us "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'en-us'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-eo "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'eo'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-fi "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'fi'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-fr "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'fr'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-de "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'de'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-el "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'el'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-hi "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'hi'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-hu "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'hu'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-is "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'is'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-id "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'id'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-it "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'it'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-ja "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'ja'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-km "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'km'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-ko "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'ko'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-la "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'la'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-lv "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'lv'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-mk "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'mk'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-no "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'no'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-pl "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'pl'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-pt "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'pt'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-do "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'ro'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-ru "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'ru'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-sr "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'sr'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-si "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'si'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-sk "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'sk'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-es "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'es'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-es-es "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'es-es'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-es-us "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'es-us'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-sw "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'sw'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-sv "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'sv'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-ta "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'ta'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-th "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'th'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-tr "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'tr'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-uk "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'uk'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-vi "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'vi'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>                    <br/>                elif msg.text.lower().startswith("say-cy "):<br/>                    sep = text.split(" ")<br/>                    say = text.replace(sep[0] + " ","")<br/>                    lang = 'cy'<br/>                    tts = gTTS(text=say, lang=lang)<br/>                    tts.save("hasil.mp3")<br/>                    chivas.sendAudio(msg.to,"hasil.mp3")<br/>#==============================================================================# <br/>                elif msg.text.lower().startswith("tr-af "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='af')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-sq "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='sq')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-am "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='am')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ar "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ar')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-hy "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='hy')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-az "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='az')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-eu "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='eu')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-be "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='be')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-bn "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='bn')<br/>                    A = hasil.text<br/>                    chivaa.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-bs "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='bs')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-bg "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='bg')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ca "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ca')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ceb "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ceb')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ny "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ny')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-zh-cn "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='zh-cn')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-zh-tw "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='zh-tw')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-co "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='co')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-hr "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='hr')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-cs "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='cs')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-da "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='da')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-nl "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='nl')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-en "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='en')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-et "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='et')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-fi "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='fi')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-fr "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='fr')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-fy "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='fy')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-gl "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='gl')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ka "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ka')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-de "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='de')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-el "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='el')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-gu "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='gu')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ht "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ht')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ha "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ha')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-haw "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='haw')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-iw "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='iw')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-hi "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='hi')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-hmn "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='hmn')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-hu "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='hu')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-is "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='is')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ig "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ig')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-id "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='id')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ga "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ga')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-it "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='it')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ja "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ja')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-jw "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='jw')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-kn "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='kn')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-kk "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='kk')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-km "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='km')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ko "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ko')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ku "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ku')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ky "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ky')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-lo "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='lo')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-la "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='la')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-lv "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='lv')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-lt "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='lt')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-lb "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='lb')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-mk "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='mk')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-mg "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='mg')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ms "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ms')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ml "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ml')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-mt "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='mt')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-mi "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='mi')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-mr "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='mr')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-mn "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='mn')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-my "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='my')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ne "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ne')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-no "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='no')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ps "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ps')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-fa "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='fa')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-pl "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='pl')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-pt "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='pt')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-pa "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='pa')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ro "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ro')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ru "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ru')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-sm "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='sm')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-gd "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='gd')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-sr "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='sr')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-st "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='st')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-sn "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='sn')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-sd "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='sd')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-si "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='si')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-sk "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='sk')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-sl "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='sl')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-so "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='so')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-es "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='es')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-su "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='su')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-sw "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='sw')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-sv "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='sv')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-tg "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='tg')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ta "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ta')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-te "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='te')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-th "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='th')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-tr "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='tr')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-uk "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='uk')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-ur "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='ur')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-uz "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='uz')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-vi "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='vi')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-cy "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='cy')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-xh "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='xh')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-yi "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='yi')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-yo "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='yo')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-zu "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='zu')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-fil "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='fil')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>                elif msg.text.lower().startswith("tr-he "):<br/>                    sep = text.split(" ")<br/>                    isi = text.replace(sep[0] + " ","")<br/>                    translator = Translator()<br/>                    hasil = translator.translate(isi, dest='he')<br/>                    A = hasil.text<br/>                    chivas.sendMessage(msg.to, A)<br/>#==============================================================================#   <br/>                elif text.lower() == 'kalender':<br/>                    tz = pytz.timezone("Asia/Makassar")<br/>                    timeNow = datetime.now(tz=tz)<br/>                    day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]<br/>                    hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]<br/>                    bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]<br/>                    hr = timeNow.strftime("%A")<br/>                    bln = timeNow.strftime("%m")<br/>                    for i in range(len(day)):<br/>                        if hr == day[i]: hasil = hari[i]<br/>                    for k in range(0, len(bulan)):<br/>                        if bln == str(k): bln = bulan[k-1]<br/>                    readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\nJam : [ " + timeNow.strftime('%H:%M:%S') + " ]"<br/>                    chivas.sendMessage(msg.to, readTime)                 <br/>                elif "screenshotwebsite" in msg.text.lower():<br/>                    sep = text.split(" ")<br/>                    query = text.replace(sep[0] + " ","")<br/>                    with requests.session() as web:<br/>                        r = web.get("http://rahandiapi.herokuapp.com/sswebAPI?key=betakey&link={}".format(urllib.parse.quote(query)))<br/>                        data = r.text<br/>                        data = json.loads(data)<br/>                        chivas.sendImageWithURL(to, data["result"])<br/>                elif "checkdate" in msg.text.lower():<br/>                    sep = msg.text.split(" ")<br/>                    tanggal = msg.text.replace(sep[0] + " ","")<br/>                    r=requests.get('https://script.google.com/macros/exec?service=AKfycbw7gKzP-WYV2F5mc9RaR7yE3Ve1yN91Tjs91hp_jHSE02dSv9w&nama=ervan&tanggal='+tanggal)<br/>                    data=r.text<br/>                    data=json.loads(data)<br/>                    ret_ = "╔══[ D A T E ]"<br/>                    ret_ += "\n╠ Date Of Birth : {}".format(str(data["data"]["lahir"]))<br/>                    ret_ += "\n╠ Age : {}".format(str(data["data"]["usia"]))<br/>                    ret_ += "\n╠ Birthday : {}".format(str(data["data"]["ultah"]))<br/>                    ret_ += "\n╠ Zodiak : {}".format(str(data["data"]["zodiak"]))<br/>                    ret_ += "\n╚══[ Success ]"<br/>                    chivas.sendMessage(to, str(ret_))<br/>                elif "instagraminfo" in msg.text.lower():<br/>                    sep = text.split(" ")<br/>                    search = text.replace(sep[0] + " ","")<br/>                    with requests.session() as web:<br/>                        web.headers["User-Agent"] = random.choice(settings["userAgent"])<br/>                        r = web.get("https://www.instagram.com/{}/?__a=1".format(search))<br/>                        try:<br/>                            data = json.loads(r.text)<br/>                            ret_ = "╔══[ Profile Instagram ]"<br/>                            ret_ += "\n╠ Nama : {}".format(str(data["user"]["full_name"]))<br/>                            ret_ += "\n╠ Username : {}".format(str(data["user"]["username"]))<br/>                            ret_ += "\n╠ Bio : {}".format(str(data["user"]["biography"]))<br/>                            ret_ += "\n╠ Pengikut : {}".format(format_number(data["user"]["followed_by"]["count"]))<br/>                            ret_ += "\n╠ Diikuti : {}".format(format_number(data["user"]["follows"]["count"]))<br/>                            if data["user"]["is_verified"] == True:<br/>                                ret_ += "\n╠ Verifikasi : Sudah"<br/>                            else:<br/>                                ret_ += "\n╠ Verifikasi : Belum"<br/>                            if data["user"]["is_private"] == True:<br/>                                ret_ += "\n╠ Akun Pribadi : Iya"<br/>                            else:<br/>                                ret_ += "\n╠ Akun Pribadi : Tidak"<br/>                            ret_ += "\n╠ Total Post : {}".format(format_number(data["user"]["media"]["count"]))<br/>                            ret_ += "\n╚══[ https://www.instagram.com/{} ]".format(search)<br/>                            path = data["user"]["profile_pic_url_hd"]<br/>                            chivas.sendImageWithURL(to, str(path))<br/>                            chivas.sendMessage(to, str(ret_))<br/>                        except:<br/>                            chivas.sendMessage(to, "Pengguna tidak ditemukan")<br/>                elif "instagrampost" in msg.text.lower():<br/>                    separate = msg.text.split(" ")<br/>                    user = msg.text.replace(separate[0] + " ","")<br/>                    profile = "https://www.instagram.com/" + user<br/>                    with requests.session() as x:<br/>                        x.headers['user-agent'] = 'Mozilla/5.0'<br/>                        end_cursor = ''<br/>                        for count in range(1, 999):<br/>                            print('PAGE: ', count)<br/>                            r = x.get(profile, params={'max_id': end_cursor})<br/>                        <br/>                            data = re.search(r'window._sharedData = (\{.+?});</script>', r.text).group(1)<br/>                            j    = json.loads(data)<br/>                        <br/>                            for node in j['entry_data']['ProfilePage'][0]['user']['media']['nodes']: <br/>                                if node['is_video']:<br/>                                    page = 'https://www.instagram.com/p/' + node['code']<br/>                                    r = x.get(page)<br/>                                    url = re.search(r'"video_url": "([^"]+)"', r.text).group(1)<br/>                                    print(url)<br/>                                    chivas.sendVideoWithURL(msg.to,url)<br/>                                else:<br/>                                    print (node['display_src'])<br/>                                    chivas.sendImageWithURL(msg.to,node['display_src'])<br/>                            end_cursor = re.search(r'"end_cursor": "([^"]+)"', r.text).group(1)<br/>                elif "searchimage" in msg.text.lower():<br/>                    separate = msg.text.split(" ")<br/>                    search = msg.text.replace(separate[0] + " ","")<br/>                    with requests.session() as web:<br/>                        web.headers["User-Agent"] = random.choice(settings["userAgent"])<br/>                        r = web.get("http://rahandiapi.herokuapp.com/imageapi?key=betakey&q={}".format(urllib.parse.quote(search)))<br/>                        data = r.text<br/>                        data = json.loads(data)<br/>                        if data["result"] != []:<br/>                            items = data["result"]<br/>                            path = random.choice(items)<br/>                            a = items.index(path)<br/>                            b = len(items)<br/>                            chivas.sendImageWithURL(to, str(path))<br/>                elif "searchyoutube" in msg.text.lower():<br/>                    sep = text.split(" ")<br/>                    search = text.replace(sep[0] + " ","")<br/>                    params = {"search_query": search}<br/>                    with requests.session() as web:<br/>                        web.headers["User-Agent"] = random.choice(settings["userAgent"])<br/>                        r = web.get("https://www.youtube.com/results", params = params)<br/>                        soup = BeautifulSoup(r.content, "html5lib")<br/>                        ret_ = "╔══[ Youtube Result ]"<br/>                        datas = []<br/>                        for data in soup.select(".yt-lockup-title > a[title]"):<br/>                            if "&lists" not in data["href"]:<br/>                                datas.append(data)<br/>                        for data in datas:<br/>                            ret_ += "\n╠══[ {} ]".format(str(data["title"]))<br/>                            ret_ += "\n╠ https://www.youtube.com{}".format(str(data["href"]))<br/>                        ret_ += "\n╚══[ Total {} ]".format(len(datas))<br/>                        chivas.sendMessage(to, str(ret_))<br/>                        <br/>                elif "searchmusic " in msg.text.lower():<br/>                            try:                    <br/>                                search = text.replace("searchmusic ","")<br/>                                r = requests.get("https://farzain.xyz/api/joox.php?id={}".format(urllib.parse.quote(search)))<br/>                                data = r.text<br/>                                data = json.loads(data)<br/>                                info = data["info"]<br/>                                audio = data["audio"]<br/>                                hasil = "「 Hasil Musik 」\n"<br/>                                hasil += "\nPenyanyi : {}".format(str(info["penyanyi"]))<br/>                                hasil += "\nJudul : {}".format(str(info["judul"]))<br/>                                hasil += "\nAlbum : {}".format(str(info["album"]))<br/>                                hasil += "\n\nLink : \n1. Image : {}".format(str(data["gambar"]))<br/>                                hasil += "\n\nLink : \n2. MP3 : {}".format(str(audio["mp3"]))<br/>                                hasil += "\n\nLink : \n3. M4A : {}".format(str(audio["m4a"]))<br/>                                chivas.sendImageWithURL(to, str(data["gambar"]))<br/>                                chivas.sendMessage(to, str(hasil))<br/>                                chivas.sendMessage(to, "Downloading...")<br/>                                chivas.sendMessage(to, "「 Result MP3 」")<br/>                                chivas.sendAudioWithURL(to, str(audio["mp3"]))<br/>                                chivas.sendMessage(to, "「 Result M4A 」")<br/>                                chivas.sendVideoWithURL(to, str(audio["m4a"]))<br/>                                chivas.sendMessage(to, "Success Download...")<br/>                            except Exception as error:<br/>                            	chivas.sendMessage(to, "「 Result Error 」\n" + str(error))<br/>                            <br/>                elif "searchlyric" in msg.text.lower():<br/>                    sep = text.split(" ")<br/>                    search = text.replace(sep[0] + " ","")<br/>                    params = {'songname': search}<br/>                    with requests.session() as web:<br/>                        web.headers["User-Agent"] = random.choice(settings["userAgent"])<br/>                        r = web.get("https://ide.fdlrcn.com/workspace/yumi-apis/joox?" + urllib.parse.urlencode(params))<br/>                        try:<br/>                            data = json.loads(r.text)<br/>                            for song in data:<br/>                                songs = song[5]<br/>                                lyric = songs.replace('ti:','Title - ')<br/>                                lyric = lyric.replace('ar:','Artist - ')<br/>                                lyric = lyric.replace('al:','Album - ')<br/>                                removeString = "[1234567890.:]"<br/>                                for char in removeString:<br/>                                    lyric = lyric.replace(char,'')<br/>                                ret_ = "╔══[ Lyric ]"<br/>                                ret_ += "\n╠ Nama lagu : {}".format(str(song[0]))<br/>                                ret_ += "\n╠ Durasi : {}".format(str(song[1]))<br/>                                ret_ += "\n╠ Link : {}".format(str(song[4]))<br/>                                ret_ += "\n╚══[ Finish ]\n{}".format(str(lyric))<br/>                                chivas.sendMessage(to, str(ret_))<br/>                        except:<br/>                            chivas.sendMessage(to, "Lirik tidak ditemukan")<br/>            elif msg.contentType == 7:<br/>                if settings["checkSticker"] == True:<br/>                    stk_id = msg.contentMetadata['STKID']<br/>                    stk_ver = msg.contentMetadata['STKVER']<br/>                    pkg_id = msg.contentMetadata['STKPKGID']<br/>                    ret_ = "╔══[ Sticker Info ]"<br/>                    ret_ += "\n╠ STICKER ID : {}".format(stk_id)<br/>                    ret_ += "\n╠ STICKER PACKAGES ID : {}".format(pkg_id)<br/>                    ret_ += "\n╠ STICKER VERSION : {}".format(stk_ver)<br/>                    ret_ += "\n╠ STICKER URL : line://shop/detail/{}".format(pkg_id)<br/>                    ret_ += "\n╚══[ Finish ]"<br/>                    chivas.sendMessage(to, str(ret_))<br/>                            <br/>#===============================================================================[NEW]                    <br/>                    <br/>            <br/>            elif msg.text.lower().startswith("checkpraytime "):    <br/>                sep = text.split(" ")<br/>                location = text.replace(sep[0] + " ","")<br/>                with requests.session() as web:<br/>                    web.headers["user-agent"] = random.choice(settings["userAgent"])<br/>                    r = web.get("http://api.corrykalam.net/apisholat.php?lokasi={}".format(urllib.parse.quote(location)))<br/>                    data = r.text<br/>                    data = json.loads(data)<br/>                    if data[1] != "Subuh : " and data[2] != "Dzuhur : " and data[3] != "Ashr : " and data[4] != "Maghrib : " and data[5] != "Isha : ":<br/>                        ret_ = "╔══[ Prayer Schedule ]"<br/>                        ret_ += "\n╠ Lokasi : " + data[0]<br/>                        ret_ += "\n╠ " + data[1]<br/>                        ret_ += "\n╠ " + data[2]<br/>                        ret_ += "\n╠ " + data[3]<br/>                        ret_ += "\n╠ " + data[4]<br/>                        ret_ += "\n╠ " + data[5]<br/>                        ret_ += "\n╚══[ Complete ]"<br/>                    else:<br/>                        ret_ = "[ Prayer Schedule ] Error : Lokasi tidak ditemukan" <br/>                        chivas.sendMessage(to, str(ret_))<br/>                        <br/>            elif msg.text.lower().startswith("checkweather "):       <br/>                sep = text.split(" ")<br/>                location = text.replace(sep[0] + " ","")<br/>                with requests.session() as web:<br/>                    web.headers["user-agent"] = random.choice(settings["userAgent"])<br/>                    r = web.get("http://api.corrykalam.net/apicuaca.php?kota={}".format(urllib.parse.quote(location)))<br/>                    data = r.text<br/>                    data = json.loads(data)<br/>                    if "result" not in data:<br/>                        ret_ = "╔══[ Weather Status ]"<br/>                        ret_ += "\n╠ Lokasi : " + data[0].replace("Temperatur di kota ","")<br/>                        ret_ += "\n╠ Suhu : " + data[1].replace("Suhu : ","")<br/>                        ret_ += "\n╠ Kelembaban : " + data[2].replace("Kelembaban : ","")<br/>                        ret_ += "\n╠ Tekanan Udara : " + data[3].replace("Tekanan udara : ","")<br/>                        ret_ += "\n╠ Kecepatan Angin : " + data[4].replace("Kecepatan angin : ","")<br/>                        ret_ += "\n╚══[ Complete ]"<br/>                    else:<br/>                        ret_ = "[ Weather Status ] Error : Lokasi tidak ditemukan"<br/>                        chivas.sendMessage(to, str(ret_))<br/>                        <br/>            elif msg.text.lower().startswith("checklocation "):   <br/>                sep = text.split(" ")<br/>                location = text.replace(sep[0] + " ","")<br/>                with requests.session() as web:<br/>                    web.headers["user-agent"] = random.choice(settings["userAgent"])<br/>                    r = web.get("http://api.corrykalam.net/apiloc.php?lokasi={}".format(urllib.parse.quote(location)))<br/>                    data = r.text<br/>                    data = json.loads(data)<br/>                    if data[0] != "" and data[1] != "" and data[2] != "":<br/>                        link = "https://www.google.co.id/maps/@{},{},15z".format(str(data[1]), str(data[2]))<br/>                        ret_ = "╔══[ Details Location ]"<br/>                        ret_ += "\n╠ Lokasi : " + data[0]<br/>                        ret_ += "\n╠ Google Maps : " + link<br/>                        ret_ += "\n╚══[ Complete ]"<br/>                    else:<br/>                        ret_ = "[ Details Location ] Error : Lokasi tidak ditemukan"<br/>                        chivas.sendMessage(to,str(ret_))<br/>                # Check if only image<br/>                <br/>            elif text.lower() == 'cpp':<br/>                settings["changePicture"] = True<br/>                chivas.sendMessage(to, "Silahkan kirim gambarnya")<br/>                <br/>            elif text.lower() == 'cgp':<br/>                if msg.toType == 2:<br/>                    if to not in settings["changeGroupPicture"]:<br/>                        settings["changeGroupPicture"].append(to)<br/>                        chivas.sendMessage(to, "Silahkan kirim gambarnya")<br/>                <br/>            elif msg.contentType == 1:<br/>                if settings["changePicture"] == True:<br/>                    path = chivas.downloadObjectMsg(msg_id)<br/>                    settings["changePicture"] = False<br/>                    chivas.updateProfilePicture(path)<br/>                    chivas.sendMessage(to, "Berhasil mengubah foto profile")<br/>                if msg.toType == 2:<br/>                    if to in settings["changeGroupPicture"]:<br/>                        path = chivas.downloadObjectMsg(msg_id)<br/>                        settings["changeGroupPicture"].remove(to)<br/>                        chivas.updateGroupPicture(to, path)<br/>                        chivas.sendMessage(to, "Berhasil mengubah foto group")   <br/>                            <br/>            elif text.lower() == 'rejectall':<br/>                ginvited = chivas.ginvited<br/>                if ginvited != [] and ginvited != None:<br/>                    for gid in ginvited:<br/>                        chivas.rejectGroupInvitation(gid)<br/>                        chivas.sendMessage(to, "Berhasil tolak sebanyak {} undangan".format(str(len(ginvited))))<br/>                else:<br/>                    chivas.sendMessage(to, "Tidak ada undangan yang tertunda")<br/>            <br/>            elif text.lower() == 'invgroupcall':    <br/>                if msg.toType == 2:<br/>                    group = chivas.getGroup(to)<br/>                    members = [mem.mid for mem in group.members]<br/>                    call.acquireGroupCallRoute(to)<br/>                    call.inviteIntoGroupCall(to, contactIds=members)<br/>                    chivas.sendMessage(to, "Berhasil mengundang kedalam telponan group")<br/>                    <br/>            elif text.lower() == 'removeallchat':<br/>                chivas.removeAllMessages(op.param2)<br/>                chivas.sendMessage(to, "Berhasil hapus semua chat")<div></div>            elif text.lower() == 'time':<br/>                chivas.sendMessage(to, "Goblok cek sendiri di tanggal jangan manja")<br/>                <div></div>            elif msg.text.lower().startswith("gbroadcast "):   <br/>                sep = text.split(" ")<br/>                txt = text.replace(sep[0] + " ","")<br/>                groups = chivas.groups<br/>                for group in groups:<br/>                    chivas.sendMessage(group, "[ Broadcast ]\n{}".format(str(txt)))<br/>                    chivas.sendMessage(to, "Berhasil broadcast ke {} group".format(str(len(groups))))<br/>                    <br/>            elif msg.text.lower().startswith("fbroadcast "):   <br/>                sep = text.split(" ")<br/>                txt = text.replace(sep[0] + " ","")<br/>                friends = chivas.friends<br/>                for friend in friends:<br/>                    chivas.sendMessage(friend, "[ Broadcast ]\n{}".format(str(txt)))<br/>                    chivas.sendMessage(to, "Berhasil broadcast ke {} teman".format(str(len(friends))))<br/>            elif msg.text.lower().startswith("allbroadcast "):   <br/>                sep = text.split(" ")<br/>                txt = text.replace(sep[0] + " ","")<br/>                friends = chivas.friends<br/>                groups = chivas.groups<br/>                for group in groups:<br/>                    chivas.sendMessage(group, "[ Broadcast ]\n{}".format(str(txt)))<br/>                    chivas.sendMessage(to, "Berhasil broadcast ke {} group".format(str(len(groups))))<br/>                for friend in friends:<br/>                    chivas.sendMessage(friend, "[ Broadcast ]\n{}".format(str(txt)))<br/>                    chivas.sendMessage(to, "Berhasil broadcast ke {} teman".format(str(len(friends))))                             <br/>                                    <br/>#===============================================================================[chivasMID - kiMID]<br/>        if op.type == 19:<br/>            print ("[ 19 ] KICKOUT chivas MESSAGE")<br/>            try:<br/>                if op.param3 in chivasMID:<br/>                    if op.param2 in kiMID:<br/>                        G = ki.getGroup(op.param1)<br/>#                        ginfo = ki.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki.updateGroup(G)<br/>                    else:<br/>                        G = ki.getGroup(op.param1)<br/>#                        ginfo = ki.getGroup(op.param1)<br/>                        ki.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[chivasMID - ki2MID]<br/>                elif op.param3 in chivasMID:<br/>                    if op.param2 in ki2MID:<br/>                        G = ki2.getGroup(op.param1)<br/>#                        ginfo = ki2.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki2.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki2.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki2.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki2.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki2.updateGroup(G)<br/>                    else:<br/>                        G = ki2.getGroup(op.param1)<br/>#                        ginfo = ki2.getGroup(op.param1)<br/>                        ki2.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki2.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki2.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki2.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki2.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki2.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[chivasMID - ki3MID]<br/>                elif op.param3 in chivasMID:<br/>                    if op.param2 in ki3MID:<br/>                        G = ki3.getGroup(op.param1)<br/>#                        ginfo = ki3.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki3.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki3.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki3.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki3.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki3.updateGroup(G)<br/>                    else:<br/>                        G = ki3.getGroup(op.param1)<br/>#                        ginfo = ki3.getGroup(op.param1)<br/>                        ki3.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki3.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki3.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki3.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki3.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki3.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[chivasMID - ki4MID]<br/>                elif op.param3 in chivasMID:<br/>                    if op.param2 in ki4MID:<br/>                        G = ki4.getGroup(op.param1)<br/>#                        ginfo = ki4.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki4.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki4.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki4.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki4.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki4.updateGroup(G)<br/>                    else:<br/>                        G = ki4.getGroup(op.param1)<br/>#                        ginfo = ki4.getGroup(op.param1)<br/>                        ki4.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki4.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki4.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki4.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki4.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki4.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#===============================================================================[kiMID chivasMID]<br/>                if op.param3 in kiMID:<br/>                    if op.param2 in chivasMID:<br/>                        G = chivas.getGroup(op.param1)<br/>#                        ginfo = chivas.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        chivas.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = chivas.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = chivas.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        chivas.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        chivas.updateGroup(G)<br/>                    else:<br/>                        G = chivas.getGroup(op.param1)<br/>#                        ginfo = chivas.getGroup(op.param1)<br/>                        chivas.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        chivas.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = chivas.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = chivas.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        chivas.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        chivas.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[kiMID ki2MID]<br/>                elif op.param3 in kiMID:<br/>                    if op.param2 in ki2MID:<br/>                        G = ki2.getGroup(op.param1)<br/>#                        ginfo = ki2.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki2.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki2.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki2.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki2.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki2.updateGroup(G)<br/>                    else:<br/>                        G = ki2.getGroup(op.param1)<br/>#                        ginfo = ki2.getGroup(op.param1)<br/>                        ki2.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki2.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki2.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki2.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki2.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki2.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[kiMID ki3MID]<br/>                elif op.param3 in kiMID:<br/>                    if op.param2 in ki3MID:<br/>                        G = ki3.getGroup(op.param1)<br/>#                        ginfo = ki3.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki3.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki3.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki3.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki3.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki3.updateGroup(G)<br/>                    else:<br/>                        G = ki3.getGroup(op.param1)<br/>#                        ginfo = ki3.getGroup(op.param1)<br/>                        ki3.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki3.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki3.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki3.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki3.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki3.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[kiMID ki4MID]<br/>                elif op.param3 in kiMID:<br/>                    if op.param2 in ki4MID:<br/>                        G = ki4.getGroup(op.param1)<br/>#                        ginfo = ki4.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki4.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki4.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki4.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki4.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki4.updateGroup(G)<br/>                    else:<br/>                        G = ki4.getGroup(op.param1)<br/>#                        ginfo = ki4.getGroup(op.param1)<br/>                        ki4.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki4.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki4.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki4.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki4.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki4.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#===============================================================================[ki2MID chivasMID]<br/>                if op.param3 in ki2MID:<br/>                    if op.param2 in chivasMID:<br/>                        G = chivas.getGroup(op.param1)<br/>#                        ginfo = chivas.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        chivas.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = chivas.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = chivas.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        chivas.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        chivas.updateGroup(G)<br/>                    else:<br/>                        G = chivas.getGroup(op.param1)<br/>#                        ginfo = chivas.getGroup(op.param1)<br/>                        chivas.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        chivas.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = chivas.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = chivas.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        chivas.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        chivas.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[ki2MID kiMID]<br/>                elif op.param3 in ki2MID:<br/>                    if op.param2 in kiMID:<br/>                        G = ki.getGroup(op.param1)<br/>#                        ginfo = ki.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki.updateGroup(G)<br/>                    else:<br/>                        G = ki.getGroup(op.param1)<br/>#                        ginfo = ki.getGroup(op.param1)<br/>                        ki.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[ki2MID ki3MID]<br/>                elif op.param3 in ki2MID:<br/>                    if op.param2 in ki3MID:<br/>                        G = ki3.getGroup(op.param1)<br/>#                        ginfo = ki3.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki3.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki3.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki3.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki3.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki3.updateGroup(G)<br/>                    else:<br/>                        G = ki3.getGroup(op.param1)<br/>#                        ginfo = ki3.getGroup(op.param1)<br/>                        ki3.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki3.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki3.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki3.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki3.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki3.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[ki2MID ki4MID]<br/>                elif op.param3 in ki2MID:<br/>                    if op.param2 in ki4MID:<br/>                        G = ki4.getGroup(op.param1)<br/>#                        ginfo = ki4.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki4.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki4.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki4.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki4.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki4.updateGroup(G)<br/>                    else:<br/>                        G = ki4.getGroup(op.param1)<br/>#                        ginfo = ki4.getGroup(op.param1)<br/>                        ki4.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki4.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki4.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki4.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki4.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki4.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#===============================================================================[ki3MID chivasMID]<br/>                if op.param3 in ki3MID:<br/>                    if op.param2 in chivasMID:<br/>                        G = chivas.getGroup(op.param1)<br/>#                        ginfo = chivas.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        chivas.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = chivas.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = chivas.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        chivas.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        chivas.updateGroup(G)<br/>                    else:<br/>                        G = chivas.getGroup(op.param1)<br/>#                        ginfo = chivas.getGroup(op.param1)<br/>                        chivas.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        chivas.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = chivas.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = chivas.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        chivas.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        chivas.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[ki3MID kiMID]<br/>                elif op.param3 in ki3MID:<br/>                    if op.param2 in kiMID:<br/>                        G = ki.getGroup(op.param1)<br/>#                        ginfo = ki.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki.updateGroup(G)<br/>                    else:<br/>                        G = ki.getGroup(op.param1)<br/>#                        ginfo = ki.getGroup(op.param1)<br/>                        ki.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[ki3MID ki2MID]<br/>                elif op.param3 in ki3MID:<br/>                    if op.param2 in ki2MID:<br/>                        G = ki2.getGroup(op.param1)<br/>#                        ginfo = ki2.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki2.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki2.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki2.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki2.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki2.updateGroup(G)<br/>                    else:<br/>                        G = ki2.getGroup(op.param1)<br/>#                        ginfo = ki2.getGroup(op.param1)<br/>                        ki2.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki2.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki2.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki2.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki2.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki2.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[ki3MID ki4MID]<br/>                elif op.param3 in ki3MID:<br/>                    if op.param2 in ki4MID:<br/>                        G = ki4.getGroup(op.param1)<br/>#                        ginfo = ki4.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki4.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki4.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki4.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki4.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki4.updateGroup(G)<br/>                    else:<br/>                        G = ki4.getGroup(op.param1)<br/>#                        ginfo = ki4.getGroup(op.param1)<br/>                        ki4.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki4.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki4.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki4.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki4.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki4.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#===============================================================================[ki4MID chivasMID]<br/>                if op.param3 in ki4MID:<br/>                    if op.param2 in chivasMID:<br/>                        G = chivas.getGroup(op.param1)<br/>#                        ginfo = chivas.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        chivas.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = chivas.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = chivas.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        chivas.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        chivas.updateGroup(G)<br/>                    else:<br/>                        G = chivas.getGroup(op.param1)<br/>#                        ginfo = chivas.getGroup(op.param1)<br/>                        chivas.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        chivas.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = chivas.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = chivas.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        chivas.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        chivas.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[ki4MID kiMID]<br/>                elif op.param3 in ki4MID:<br/>                    if op.param2 in kiMID:<br/>                        G = ki.getGroup(op.param1)<br/>#                        ginfo = ki.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki.updateGroup(G)<br/>                    else:<br/>                        G = ki.getGroup(op.param1)<br/>#                        ginfo = ki.getGroup(op.param1)<br/>                        ki.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[ki4MID ki2MID]<br/>                elif op.param3 in ki4MID:<br/>                    if op.param2 in ki2MID:<br/>                        G = ki2.getGroup(op.param1)<br/>#                        ginfo = ki2.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki2.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki2.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki2.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki2.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki2.updateGroup(G)<br/>                    else:<br/>                        G = ki2.getGroup(op.param1)<br/>#                        ginfo = ki2.getGroup(op.param1)<br/>                        ki2.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki2.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki2.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki2.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki2.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki2.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>#-------------------------------------------------------------------------------[ki4MID ki3MID]<br/>                elif op.param3 in ki4MID:<br/>                    if op.param2 in ki3MID:<br/>                        G = ki3.getGroup(op.param1)<br/>#                        ginfo = ki3.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = False<br/>                        ki3.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki3.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki3.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki3.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki3.updateGroup(G)<br/>                    else:<br/>                        G = ki3.getGroup(op.param1)<br/>#                        ginfo = ki3.getGroup(op.param1)<br/>                        ki3.kickoutFromGroup(op.param1,[op.param2])<br/>                        G.preventedJoinByTicket = False<br/>                        ki3.updateGroup(G)<br/>                        invsend = 0<br/>                        Ticket = ki3.reissueGroupTicket(op.param1)<br/>                        chivas.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)<br/>                        G = ki3.getGroup(op.param1)<br/>                        G.preventedJoinByTicket = True<br/>                        ki3.updateGroup(G)<br/>                        G.preventedJoinByTicket(G)<br/>                        ki3.updateGroup(G)<br/>                        settings["blacklist"][op.param2] = True<br/>                        <br/>                elif op.param2 not in Bots:<br/>                    if op.param2 in admin:<br/>                        pass<br/>                    elif settings["protect"] == True:<br/>                        settings["blacklist"][op.param2] = True<br/>                        random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])<br/>                        random.choice(KAC).inviteIntoGroup(op.param1,[op.param3])<br/>                        random.choice(KAC).sendText(op.param1,"Don't Play bro...!")<br/>                        <br/>                else:<br/>                    pass<br/>            except:<br/>                pass<br/>#==============================================================================#<br/>        if op.type == 13:<br/>            if op.param2 not in Bots:<br/>                if op.param2 in admin:<br/>                    pass<br/>                elif settings["inviteprotect"] == True:<br/>                    settings["blacklist"][op.param2] = True<br/>                    random.choice(KAC).cancelGroupInvitation(op.param1,[op.param3])<br/>                    random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])<br/>                    if op.param2 not in Bots:<br/>                        if op.param2 in admin:<br/>                            pass<br/>                        elif settings["cancelprotect"] == True:<br/>                            settings["blacklist"][op.param2] = True<br/>                            random.choice(KAC).cancelGroupInvitation(op.param1,[op.param3])	<br/>#-------------------------------------------------------------------------------<br/>        if op.type == 11:<br/>            if op.param2 not in Bots:<br/>                if op.param2 in admin and Bots and Owner:<br/>                    pass<br/>                elif settings["qrprotect"] == True:<br/>                    settings["blacklist"][op.param2] = True<br/>                    G = ki.getGroup(op.param1)<br/>                    G.preventedJoinByTicket = True<br/>                    ki.updateGroup(G)<br/>                    random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])<br/>                else:<br/>                    chivas.sendMessage(op.param1,"Qr under protect")<br/>            else:<br/>                chivas.sendMessage(op.param1,"")<br/>#==============================================================================#<br/>        if op.type == 55:<br/>            print ("[ 55 ] NOTIFIED READ MESSAGE")<br/>            if op.param1 in read["readPoint"]:<br/>                _name = chivas.getContact(op.param2).displayName<br/>                tz = pytz.timezone("Asia/Jakarta")<br/>                timeNow = datetime.now(tz=tz)<br/>                timeHours = datetime.strftime(timeNow," (%H:%M)")<br/>                read["readMember"][op.param1][op.param2] = str(_name) + str(timeHours)<br/>        backupData()<br/>    except Exception as error:<br/>        logError(error)<br/>#==============================================================================#<br/>        if op.type == 26:<br/>            msg = op.message<br/>            if text.lower() == '/ti/g/':    <br/>                if settings["autoJoinTicket"] == True:<br/>                    link_re = re.compile('(?:line\:\/|line\.me\/R)\/ti\/g\/([a-zA-Z0-9_-]+)?')<br/>                    links = link_re.findall(text)<br/>                    n_links = []<br/>                    for l in links:<br/>                        if l not in n_links:<br/>                            n_links.append(l)<br/>                    for ticket_id in n_links:<br/>                        group = chivas.findGroupByTicket(ticket_id)<br/>                        chivas.acceptGroupInvitationByTicket(group.id,ticket_id)<br/>                        chivas.sendMessage(to, "Berhasil masuk ke group %s" % str(group.name)) <br/>                        <br/>        if op.type == 26:<br/>            print ("[ 26 ] RECEIVE MESSAGE")<br/>            msg = op.message<br/>            text = msg.text<br/>            msg_id = msg.id<br/>            receiver = msg.to<br/>            sender = msg._from<br/>            if msg.toType == 0:<br/>                if sender != chivas.profile.mid:<br/>                    to = sender<br/>                else:<br/>                    to = receiver<br/>            else:<br/>                to = receiver<br/>                if settings["autoRead"] == True:<br/>                    chivas.sendChatChecked(to, msg_id)<br/>                if to in read["readPoint"]:<br/>                    if sender not in read["ROM"][to]:<br/>                        read["ROM"][to][sender] = True<br/>                if sender in settings["mimic"]["target"] and settings["mimic"]["status"] == True and settings["mimic"]["target"][sender] == True:<br/>                    text = msg.text<br/>                    if text is not None:<br/>                        chivas.sendMessage(msg.to,text)<br/>                if msg.contentType == 0 and sender not in chivasMID and msg.toType == 2:<br/>                    if 'MENTION' in msg.contentMetadata.keys()!= None:<br/>                        names = re.findall(r'@(\w+)', text)<br/>                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])<br/>                        mentionees = mention['MENTIONEES']<br/>                        lists = []<br/>                        for mention in mentionees:<br/>                            if chivasMID in mention["M"]:<br/>                                if settings["detectMention"] == True:<br/>                                    contact = chivas.getContact(sender)<br/>                                    chivas.sendMessage(to, "sundala nu")<br/>                                    sendMessageWithMention(to, contact.mid)<br/>                                break<br/>                        <br/>    except Exception as error:<br/>        logError(error)<br/>#==============================================================================#<br/># Auto join if BOT invited to group<br/>def NOTIFIED_INVITE_INTO_GROUP(op):<br/>    try:<br/>        chivas.acceptGroupInvitation(op.param1)<br/>        ki.acceptGroupInvitation(op.param1)<br/>        ki2.acceptGroupInvitation(op.param1)<br/>        ki3.acceptGroupInvitation(op.param1)<br/>        ki4.acceptGroupInvitation(op.param1)<br/>    except Exception as e:<br/>        chivas.log("[NOTIFIED_INVITE_INTO_GROUP] ERROR : " + str(e))<br/># Auto kick if BOT out to group<br/>def NOTIFIED_KICKOUT_FROM_GROUP(op):<br/>    try:<br/>        if op.param2 not in Bots:<br/>            random.choice(KAC).kickoutFromGroup(op.param1,op.param2)<br/>        else:<br/>            pass<br/>    except Exception as e:<br/>        chivas.log("[NOTIFIED_KICKOUT_FROM_GROUP] ERROR : " + str(e))<div></div>while True:<br/>    try:<br/>        ops = oepoll.singleTrace(count=50)<br/>        if ops is not None:<br/>            for op in ops:<br/>                lineBot(op)<br/>                oepoll.setRevision(op.revision)<br/>    except Exception as e:<br/>        logError(e)       <br/></div>
